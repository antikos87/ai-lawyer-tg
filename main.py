#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI-—é—Ä–∏—Å—Ç Telegram Bot
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, filters, ContextTypes

from config import TELEGRAM_TOKEN
from bot.handlers import (
    consult_command, category_selected, process_question, 
    back_to_categories, cancel_consultation, ConsultationStates,
    main_menu_callback, continue_consultation, process_dialog_message,
    continue_dialog, end_consultation
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    """
    welcome_message = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-—é—Ä–∏—Å—Ç–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /consult - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ /create - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ /analyze - –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ /subscribe - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É."
    )
    
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üîπ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üîπ /consult - –ü–æ–ª—É—á–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        "üîπ /create - –°–æ–∑–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "üîπ /analyze - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "üîπ /subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "‚ùì –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    
    await update.message.reply_text(help_text)


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–µ ConversationHandler
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu_callback(update, context)
    elif query.data == "new_consultation":
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        await query.message.reply_text(
            "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é...\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /consult"
        )
    elif query.data == "create_document":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await query.message.reply_text(
            "üìÑ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create\n"
            "(–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö)"
        )
    elif query.data == "rate_answer":
        # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await query.message.reply_text(
            "‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n"
            "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."
        )
    elif query.data == "contact_lawyer":
        # –°–≤—è–∑—å —Å —é—Ä–∏—Å—Ç–æ–º
        await query.message.reply_text(
            "üìû –î–ª—è —Å–≤—è–∑–∏ —Å —é—Ä–∏—Å—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe\n"
            "–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É."
        )


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # ConversationHandler –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    consultation_handler = ConversationHandler(
        entry_points=[CommandHandler('consult', consult_command)],
        states={
            ConsultationStates.CATEGORY_SELECTION.value: [
                CallbackQueryHandler(category_selected, pattern='^category_'),
                CallbackQueryHandler(back_to_categories, pattern='^back_to_categories$'),
                CallbackQueryHandler(main_menu_callback, pattern='^main_menu$')
            ],
            ConsultationStates.WAITING_QUESTION.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_question),
                CallbackQueryHandler(back_to_categories, pattern='^back_to_categories$'),
                CallbackQueryHandler(main_menu_callback, pattern='^main_menu$')
            ],
            ConsultationStates.CONSULTATION_DIALOG.value: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_dialog_message),
                CallbackQueryHandler(continue_consultation, pattern='^continue_consultation$'),
                CallbackQueryHandler(continue_dialog, pattern='^continue_dialog$'),
                CallbackQueryHandler(end_consultation, pattern='^end_consultation$'),
                CallbackQueryHandler(main_menu_callback, pattern='^main_menu$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel_consultation)],
        allow_reentry=True
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(consultation_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback query –≤–Ω–µ conversations
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ AI-—é—Ä–∏—Å—Ç –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main() 