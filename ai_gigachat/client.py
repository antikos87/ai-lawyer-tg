#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API
"""

import logging
import asyncio
from typing import Optional, Dict, Any, List
import httpx
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole

from config import GIGACHAT_CREDENTIALS, GIGACHAT_SCOPE

logger = logging.getLogger(__name__)


class GigaChatClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ GigaChat"""
        self.client = None
        self._initialize_client()
    
    def _initialize_client(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            self.client = GigaChat(
                credentials=GIGACHAT_CREDENTIALS,
                scope=GIGACHAT_SCOPE,
                model="GigaChat",
                verify_ssl_certs=False
            )
            logger.info("GigaChat –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
            raise
    
    async def generate_consultation(
        self, 
        user_question: str, 
        category: str,
        user_context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤–∞
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            system_prompt = self._create_consultation_system_prompt(category)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            formatted_question = self._format_user_question(user_question, category, user_context)
            
            # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
            messages = [
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=system_prompt
                ),
                Messages(
                    role=MessagesRole.USER,
                    content=formatted_question
                )
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GigaChat. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            chat_request = Chat(
                messages=messages,
                temperature=0.7,
                max_tokens=2000
            )
            
            response = await asyncio.to_thread(self.client.chat, chat_request)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            if response.choices and len(response.choices) > 0:
                answer_content = response.choices[0].message.content
            else:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            formatted_response = self._format_consultation_response(
                answer_content, 
                category, 
                user_question
            )
            
            logger.info("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return formatted_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return self._get_error_response(category)
    
    def _create_consultation_system_prompt(self, category: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        """
        base_prompt = """–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—é—Ä–∏—Å—Ç —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. 

–¢–í–û–Ø –†–û–õ–¨:
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
‚Ä¢ –°—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤ –†–§
‚Ä¢ –î–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
‚Ä¢ –≠–º–ø–∞—Ç–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–º —é—Ä–∏—Å—Ç–æ–º –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
2. –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã (—Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏)
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
5. –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

–í–ê–ñ–ù–û:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∞
‚Ä¢ –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
‚Ä¢ –ü—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∫ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        category_specific = {
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –î–æ–≥–æ–≤–æ—Ä—ã, –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞.",
            "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –Ω–∞–∫–∞–∑–∞–Ω–∏—è, –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞, –∑–∞—â–∏—Ç–∞ –≤ —Å—É–¥–µ.",
            "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ë—Ä–∞–∫, —Ä–∞–∑–≤–æ–¥, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞, –ø—Ä–∞–≤–∞ –¥–µ—Ç–µ–π.",
            "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –¢—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –∑–∞—Ä–ø–ª–∞—Ç–∞, –æ—Ç–ø—É—Å–∫–∞, —Ç—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã.",
            "–ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ê—Ä–µ–Ω–¥–∞, –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –∂–∏–ª—å—è, –ñ–ö–•, –ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è.",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –®—Ç—Ä–∞—Ñ—ã, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≥–æ—Å—É—Å–ª—É–≥–∏.",
            "–î—Ä—É–≥–æ–µ": "\n\n–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –û–±—â–∏–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–µ–∂–æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏."
        }
        
        return base_prompt + category_specific.get(category, category_specific["–î—Ä—É–≥–æ–µ"])
    
    def _format_user_question(
        self, 
        question: str, 
        category: str, 
        context: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        formatted = f"–ö–ê–¢–ï–ì–û–†–ò–Ø: {category}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if context and context.get('is_continuation', False):
            formatted += "–†–ï–ñ–ò–ú: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            consultation_history = context.get('consultation_history', [])
            if consultation_history:
                formatted += "–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n"
                for idx, message in enumerate(consultation_history[-6:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
                    role = "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨" if message['role'] == 'user' else "–Æ–†–ò–°–¢"
                    content = message['content'][:200] + "..." if len(message['content']) > 200 else message['content']
                    formatted += f"{idx}. {role}: {content}\n\n"
            
            formatted += f"–ù–û–í–´–ô –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{question}\n\n"
            formatted += "–£—á—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑—ã–≤–∞—è –µ–≥–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º."
        else:
            formatted += f"–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{question}\n\n"
            formatted += "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É."
        
        if context and not context.get('is_continuation', False):
            formatted += "\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:\n"
            for key, value in context.items():
                formatted += f"‚Ä¢ {key}: {value}\n"
        
        return formatted
    
    def _format_consultation_response(
        self, 
        response: str, 
        category: str, 
        original_question: str
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è Telegram
        """
        # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        question_preview = original_question[:100] + "..." if len(original_question) > 100 else original_question
        
        formatted_response = (
            f"üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}**\n\n"
            f"‚ùì **–í–∞—à –≤–æ–ø—Ä–æ—Å:** {question_preview}\n\n"
            f"‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n\n"
            f"{response}\n\n"
            f"‚ùì –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /consult —Å–Ω–æ–≤–∞."
        )
        
        return formatted_response
    
    def _get_error_response(self, category: str) -> str:
        """
        –û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        return (
            f"üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}**\n\n"
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /consult —Å–Ω–æ–≤–∞\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "üìû –ü—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É."
        )
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat
        """
        try:
            test_messages = [
                Messages(
                    role=MessagesRole.USER,
                    content="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
            ]
            
            chat_request = Chat(
                messages=test_messages,
                temperature=0.1,
                max_tokens=50
            )
            
            response = await asyncio.to_thread(self.client.chat, chat_request)
            logger.info("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat: {e}")
            return False

    async def generate_document(self, system_prompt: str, user_prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é GigaChat
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            full_system_prompt = f"""{system_prompt}

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
- –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –î–æ–±–∞–≤—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
            
            # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
            messages = [
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=full_system_prompt
                ),
                Messages(
                    role=MessagesRole.USER,
                    content=user_prompt
                )
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            chat_request = Chat(
                messages=messages,
                temperature=0.5,  # –ú–µ–Ω—å—à–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                max_tokens=3000   # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            )
            
            response = await asyncio.to_thread(self.client.chat, chat_request)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            if response.choices and len(response.choices) > 0:
                generated_document = response.choices[0].message.content
                return generated_document
            else:
                return self._get_document_fallback()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return self._get_document_fallback()
    
    
    def _get_document_fallback(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        return """–î–û–ö–£–ú–ï–ù–¢
        
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —é—Ä–∏—Å—Ç—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.

–î–∞—Ç–∞: ______________
–ü–æ–¥–ø–∏—Å—å: ______________"""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
gigachat_client = GigaChatClient()