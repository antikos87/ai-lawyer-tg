#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Production webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è AI-—é—Ä–∏—Å—Ç–∞
–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º nginx
"""

import logging
import json
import os
import sys
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from flask import Flask, request, jsonify
from datetime import datetime
from db_client.database import SupabaseClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/ai-lawyer-webhook.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    supabase_client = SupabaseClient()
    logger.info("Webhook: Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"Webhook: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
    supabase_client = None


@app.route('/webhook/ai-lawyer', methods=['POST'])
def handle_ai_lawyer_webhook():
    """
    Production endpoint –¥–ª—è AI-—é—Ä–∏—Å—Ç–∞ (YooKassa)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç YooKassa
        webhook_data = request.get_json()
        
        if not webhook_data:
            logger.warning("AI-Lawyer: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π webhook –æ—Ç YooKassa")
            return jsonify({"error": "Empty webhook data"}), 400
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"AI-Lawyer webhook –ø–æ–ª—É—á–µ–Ω: {webhook_data.get('event', 'unknown')}")
        logger.debug(f"AI-Lawyer webhook data: {webhook_data}")
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è YooKassa webhook
        if not validate_yookassa_webhook(webhook_data):
            logger.warning("AI-Lawyer: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook –æ—Ç YooKassa")
            return jsonify({"error": "Invalid webhook"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        result = process_webhook_simple(webhook_data)
        
        if result['success']:
            logger.info(f"AI-Lawyer: Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - {result['message']}")
            return jsonify({"status": "success", "message": result['message']}), 200
        else:
            logger.error(f"AI-Lawyer: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook - {result['error']}")
            return jsonify({"error": result['error']}), 500
        
    except Exception as e:
        logger.error(f"AI-Lawyer: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"error": "Internal server error"}), 500


def validate_yookassa_webhook(webhook_data):
    """
    –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è webhook –æ—Ç YooKassa
    """
    required_fields = ['event', 'object']
    
    for field in required_fields:
        if field not in webhook_data:
            logger.warning(f"AI-Lawyer: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
            return False
    
    payment_obj = webhook_data.get('object', {})
    if not payment_obj.get('id'):
        logger.warning("AI-Lawyer: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞")
        return False
    
    return True


def process_webhook_simple(webhook_data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase
    """
    try:
        event_type = webhook_data.get('event')
        payment_obj = webhook_data.get('object', {})
        payment_id = payment_obj.get('id')
        status = payment_obj.get('status')
        metadata = payment_obj.get('metadata', {})
        
        telegram_id = metadata.get('telegram_id')
        subscription_type = metadata.get('subscription_type')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"AI-Lawyer: –°–æ–±—ã—Ç–∏–µ {event_type}, –ø–ª–∞—Ç–µ–∂ {payment_id}, —Å—Ç–∞—Ç—É—Å {status}")
        
        if telegram_id and subscription_type:
            logger.info(f"AI-Lawyer: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}, —Ç–∞—Ä–∏—Ñ {subscription_type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        if event_type == 'payment.succeeded':
            if telegram_id and subscription_type:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Supabase
                if supabase_client:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é event loop –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        subscription = loop.run_until_complete(
                            supabase_client.create_paid_subscription(
                                telegram_id=int(telegram_id),
                                subscription_type=subscription_type,
                                payment_id=payment_id
                            )
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                        loop.run_until_complete(
                            supabase_client.update_payment_status(payment_id, 'succeeded')
                        )
                        
                        loop.close()
                        
                        message = f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
                        logger.info(f"AI-Lawyer: {message}")
                        
                        return {"success": True, "message": message}
                    except Exception as e:
                        logger.error(f"AI-Lawyer: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}"}
                else:
                    # Fallback –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    message = f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–µ–Ω (Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}, —Ç–∞—Ä–∏—Ñ: {subscription_type}"
                    logger.warning(f"AI-Lawyer: {message}")
                    return {"success": True, "message": message}
            else:
                error = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {payment_id}"
                logger.error(f"AI-Lawyer: {error}")
                return {"success": False, "error": error}
                
        elif event_type == 'payment.canceled':
            message = f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω"
            logger.info(f"AI-Lawyer: {message}")
            return {"success": True, "message": message}
            
        elif event_type == 'refund.succeeded':
            message = f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ –ø–ª–∞—Ç–µ–∂—É {payment_id} —É—Å–ø–µ—à–µ–Ω"
            logger.info(f"AI-Lawyer: {message}")
            return {"success": True, "message": message}
            
        elif event_type == 'payment.waiting_for_capture':
            message = f"–ü–ª–∞—Ç–µ–∂ {payment_id} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            logger.info(f"AI-Lawyer: {message}")
            return {"success": True, "message": message}
            
        else:
            message = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_type}"
            logger.warning(f"AI-Lawyer: {message}")
            return {"success": True, "message": message}
        
    except Exception as e:
        error = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}"
        logger.error(f"AI-Lawyer: {error}")
        return {"success": False, "error": error}


@app.route('/health', methods=['GET'])
def health_check():
    """
    Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    return jsonify({
        "status": "ok",
        "service": "ai-lawyer-webhook",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }), 200


@app.route('/status', methods=['GET'])
def status_check():
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    """
    return jsonify({
        "service": "AI-Lawyer Webhook Server",
        "version": "1.0.0",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "webhook": "/webhook/ai-lawyer",
            "health": "/health",
            "status": "/status"
        },
        "yookassa_url": "https://webhook.ii-photo.ru/webhook/ai-lawyer"
    }), 200


@app.route('/', methods=['GET'])
def index():
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    return jsonify({
        "service": "AI-Lawyer Webhook Server",
        "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π YooKassa –¥–ª—è AI-—é—Ä–∏—Å—Ç–∞",
        "endpoints": [
            "/webhook/ai-lawyer - Webhook –¥–ª—è YooKassa",
            "/health - Health check",
            "/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
        ],
        "external_url": "https://webhook.ii-photo.ru/webhook/ai-lawyer"
    }), 200


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è production
    port = int(os.environ.get('PORT', 8081))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-Lawyer webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üì° –ü–æ—Ä—Ç: {port}")
    logger.info(f"üîó –í–Ω–µ—à–Ω–∏–π URL: https://webhook.ii-photo.ru/webhook/ai-lawyer")
    logger.info(f"üè• Health check: http://localhost:{port}/health")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        host='127.0.0.1',  # –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
        port=port,
        debug=debug,
        threaded=True
    ) 