#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç gunicorn –¥–ª—è production-ready –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

def check_dependencies():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    required_packages = [
        'flask>=3.0.0',
        'gunicorn>=21.0.0',
        'python-dotenv>=1.0.0',
        'yookassa>=3.7.0',
        'supabase>=2.10.0'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import flask
        import gunicorn
        import yookassa
        import supabase
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False


def check_environment():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    required_env_vars = [
        'YOOKASSA_SHOP_ID',
        'YOOKASSA_SECRET_KEY',
        'SUPABASE_URL',
        'SUPABASE_KEY'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    missing_vars = []
    for var in required_env_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True


def create_gunicorn_config():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è gunicorn
    """
    config_content = """# Gunicorn –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞
import multiprocessing

# –°–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
bind = "0.0.0.0:8080"
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = "sync"
worker_connections = 1000
timeout = 30
keepalive = 2
max_requests = 1000
max_requests_jitter = 50

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
accesslog = "logs/access.log"
errorlog = "logs/error.log"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# –ü—Ä–æ—Ü–µ—Å—Å
daemon = False
pidfile = "webhook.pid"
user = None
group = None
preload_app = True

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
limit_request_line = 4096
limit_request_fields = 100
limit_request_field_size = 8190
"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    
    with open("gunicorn.conf.py", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è gunicorn")


def create_systemd_service():
    """
    –°–æ–∑–¥–∞–µ—Ç systemd service —Ñ–∞–π–ª
    """
    current_dir = Path.cwd()
    python_path = sys.executable
    
    service_content = f"""[Unit]
Description=AI-Lawyer Webhook Server
After=network.target

[Service]
Type=forking
User=www-data
Group=www-data
WorkingDirectory={current_dir}
Environment=PATH={current_dir}/venv/bin
ExecStart={python_path} -m gunicorn --config gunicorn.conf.py webhook.server:app
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    service_file = "ai-lawyer-webhook.service"
    with open(service_file, "w", encoding="utf-8") as f:
        f.write(service_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω systemd service —Ñ–∞–π–ª: {service_file}")
    print(f"üìã –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"   sudo cp {service_file} /etc/systemd/system/")
    print(f"   sudo systemctl daemon-reload")
    print(f"   sudo systemctl enable ai-lawyer-webhook")
    print(f"   sudo systemctl start ai-lawyer-webhook")


def create_nginx_config():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è nginx
    """
    nginx_config = """# Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è AI-Lawyer Webhook
server {
    listen 80;
    server_name webhook.ii-photo.ru;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name webhook.ii-photo.ru;  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    
    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏)
    ssl_certificate /path/to/your/certificate.crt;
    ssl_certificate_key /path/to/your/private.key;
    
    # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers off;
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    access_log /var/log/nginx/webhook_access.log;
    error_log /var/log/nginx/webhook_error.log;
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    location /webhook/ {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # –†–∞–∑–º–µ—Ä—ã –±—É—Ñ–µ—Ä–æ–≤
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }
    
    # Health check endpoints
    location /health {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        access_log off;
    }
    
    location /status {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
    }
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    location ~ /\\.ht {
        deny all;
    }
    
    # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç DDoS
    location /webhook/ai-lawyer {
        limit_req zone=webhook burst=10 nodelay;
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Rate limiting
http {
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=1r/s;
}
"""
    
    with open("nginx.conf", "w", encoding="utf-8") as f:
        f.write(nginx_config)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx")
    print("üìã –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:")
    print("   sudo cp nginx.conf /etc/nginx/sites-available/ai-lawyer-webhook")
    print("   sudo ln -s /etc/nginx/sites-available/ai-lawyer-webhook /etc/nginx/sites-enabled/")
    print("   sudo nginx -t")
    print("   sudo systemctl reload nginx")


def deploy_development():
    """
    –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    
    if not check_dependencies():
        return False
    
    if not check_environment():
        return False
    
    print("‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ Flask dev —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        subprocess.run([
            sys.executable, 
            "webhook/server.py"
        ], check=True)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False
    
    return True


def deploy_production():
    """
    –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    """
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é...")
    
    if not check_dependencies():
        return False
    
    if not check_environment():
        return False
    
    create_gunicorn_config()
    create_systemd_service()
    create_nginx_config()
    
    print("\n‚úÖ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ nginx.conf")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ systemd service")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: sudo systemctl start ai-lawyer-webhook")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: sudo systemctl status ai-lawyer-webhook")
    
    return True


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üéØ AI-Lawyer Webhook Deployer")
    print("=" * 40)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python deploy.py dev     - –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("  python deploy.py prod    - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        return
    
    mode = sys.argv[1].lower()
    
    if mode == "dev":
        deploy_development()
    elif mode == "prod":
        deploy_production()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'dev' –∏–ª–∏ 'prod'")


if __name__ == "__main__":
    main() 