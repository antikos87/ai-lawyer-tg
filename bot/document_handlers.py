#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import logging
from enum import Enum
from typing import Dict, Any, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler  # type: ignore
from telegram.constants import ChatAction  # type: ignore

from ai_gigachat.client import gigachat_client

logger = logging.getLogger(__name__)


class DocumentStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    DOCUMENT_TYPE_SELECTION = 0
    DOCUMENT_SUBTYPE_SELECTION = 1
    DATA_COLLECTION = 2
    DOCUMENT_GENERATION = 3
    DOCUMENT_REVIEW = 4
    DOCUMENT_EDITING = 5
    DOCUMENT_FINALIZATION = 6


# –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ø–æ–¥—Ç–∏–ø—ã
DOCUMENT_TYPES = {
    "contract": {
        "name": "üìÑ –î–æ–≥–æ–≤–æ—Ä",
        "subtypes": {
            "rent": "–ê—Ä–µ–Ω–¥—ã",
            "sale": "–ö—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏", 
            "service": "–û–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥",
            "work": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç",
            "employment": "–¢—Ä—É–¥–æ–≤–æ–π",
            "loan": "–ó–∞–π–º–∞"
        }
    },
    "lawsuit": {
        "name": "‚öñÔ∏è –ò—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ",
        "subtypes": {
            "property": "–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Ä",
            "family": "–°–µ–º–µ–π–Ω—ã–π —Å–ø–æ—Ä",
            "labor": "–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä",
            "compensation": "–í–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞",
            "debt": "–í–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–∞"
        }
    },
    "claim": {
        "name": "üìß –î–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è",
        "subtypes": {
            "payment": "–û –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –¥–æ–ª–≥–∞",
            "quality": "–û –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ/—É—Å–ª—É–≥–µ",
            "contract": "–û –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞",
            "refund": "–û –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"
        }
    },
    "agreement": {
        "name": "ü§ù –°–æ–≥–ª–∞—à–µ–Ω–∏–µ",
        "subtypes": {
            "settlement": "–ú–∏—Ä–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            "alimony": "–û–± –∞–ª–∏–º–µ–Ω—Ç–∞—Ö",
            "property": "–û —Ä–∞–∑–¥–µ–ª–µ –∏–º—É—â–µ—Å—Ç–≤–∞",
            "cooperation": "–û —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ"
        }
    },
    "power_of_attorney": {
        "name": "üìã –î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        "subtypes": {
            "general": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è",
            "property": "–ù–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "vehicle": "–ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
            "bank": "–í –±–∞–Ω–∫",
            "court": "–í —Å—É–¥"
        }
    },
    "application": {
        "name": "üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ",
        "subtypes": {
            "court": "–í —Å—É–¥",
            "police": "–í –ø–æ–ª–∏—Ü–∏—é",
            "administration": "–í –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é",
            "employer": "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é"
        }
    },
    "protocol": {
        "name": "üìä –ü—Ä–æ—Ç–æ–∫–æ–ª",
        "subtypes": {
            "meeting": "–°–æ–±—Ä–∞–Ω–∏—è",
            "inspection": "–û—Å–º–æ—Ç—Ä–∞",
            "violation": "–ù–∞—Ä—É—à–µ–Ω–∏—è",
            "handover": "–ü–µ—Ä–µ–¥–∞—á–∏"
        }
    },
    "act": {
        "name": "üìë –ê–∫—Ç",
        "subtypes": {
            "acceptance": "–ü—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏",
            "inspection": "–û—Å–º–æ—Ç—Ä–∞",
            "completion": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç",
            "damage": "–û –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏"
        }
    }
}


async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    user = update.effective_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    context.user_data.pop('document_data', None)
    context.user_data.pop('document_type', None)
    context.user_data.pop('document_subtype', None)
    context.user_data.pop('generated_document', None)
    
    welcome_text = (
        f"üìÑ –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üéØ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
        "üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n"
        "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤\n"
        "‚Ä¢ –ò—Å–∫–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –î–æ—Å—É–¥–µ–±–Ω—ã–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏\n"
        "‚Ä¢ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    keyboard = []
    for doc_type, info in DOCUMENT_TYPES.items():
        keyboard.append([InlineKeyboardButton(info["name"], callback_data=f"doctype_{doc_type}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ message
    if update.callback_query:
        # –í—ã–∑–≤–∞–Ω–æ –∏–∑ callback query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    else:
        # –í—ã–∑–≤–∞–Ω–æ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ /create)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    
    return DocumentStates.DOCUMENT_TYPE_SELECTION.value


async def document_type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    doc_type = query.data.replace("doctype_", "")
    context.user_data['document_type'] = doc_type
    
    doc_info = DOCUMENT_TYPES[doc_type]
    
    subtype_text = (
        f"üìÑ **–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {doc_info['name']}**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–∏–ø–∞–º–∏
    keyboard = []
    for subtype_key, subtype_name in doc_info["subtypes"].items():
        callback_data = f"docsubtype_{subtype_key}"
        keyboard.append([InlineKeyboardButton(f"üìã {subtype_name}", callback_data=callback_data)])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.extend([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", callback_data="back_to_types")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        subtype_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return DocumentStates.DOCUMENT_SUBTYPE_SELECTION.value


async def document_subtype_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    """
    query = update.callback_query
    await query.answer()
    
    subtype = query.data.replace("docsubtype_", "")
    context.user_data['document_subtype'] = subtype
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    context.user_data['document_data'] = {}
    context.user_data['current_question'] = 0
    
    doc_type = context.user_data['document_type']
    doc_info = DOCUMENT_TYPES[doc_type]
    subtype_name = doc_info["subtypes"][subtype]
    
    confirmation_text = (
        f"‚úÖ **–í—ã–±—Ä–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc_info['name']} - {subtype_name}**\n\n"
        "üìù –¢–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="start_data_collection")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–∏–ø–∞–º", callback_data="back_to_subtypes")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        confirmation_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return DocumentStates.DATA_COLLECTION.value


async def start_data_collection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    return await ask_next_question(update, context, is_callback=True)


async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> int:
    """
    –ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    doc_type = context.user_data['document_type']
    doc_subtype = context.user_data['document_subtype']
    current_question = context.user_data.get('current_question', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    questions = get_questions_for_document(doc_type, doc_subtype)
    
    if current_question >= len(questions):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        return await start_document_generation(update, context, is_callback)
    
    question_data = questions[current_question]
    question_text = (
        f"‚ùì **–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(questions)}**\n\n"
        f"{question_data['question']}\n\n"
        f"üí° *{question_data['hint']}*"
    )
    
    keyboard = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
    if 'options' in question_data:
        for option in question_data['options']:
            keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option}")])
        keyboard.append([InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="custom_answer")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if current_question > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="prev_question")])
    
    keyboard.extend([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if is_callback:
        await update.callback_query.message.reply_text(
            question_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            question_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return DocumentStates.DATA_COLLECTION.value


def get_questions_for_document(doc_type: str, doc_subtype: str) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    questions_map = {
        "contract": {
            "rent": [
                {
                    "key": "landlord_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                },
                {
                    "key": "tenant_name", 
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"
                },
                {
                    "key": "property_address",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∞—Ä–µ–Ω–¥—É–µ–º–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞",
                    "hint": "–í–∫–ª—é—á–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É"
                },
                {
                    "key": "property_type",
                    "question": "–ß—Ç–æ —Å–¥–∞–µ—Ç—Å—è –≤ –∞—Ä–µ–Ω–¥—É?",
                    "hint": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–º—É—â–µ—Å—Ç–≤–∞",
                    "options": ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ö–æ–º–Ω–∞—Ç–∞", "–î–æ–º", "–û—Ñ–∏—Å", "–¢–æ—Ä–≥–æ–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "–°–∫–ª–∞–¥"]
                },
                {
                    "key": "rent_amount",
                    "question": "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
                },
                {
                    "key": "rent_period",
                    "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤–Ω–æ—Å–∏—Ç—Å—è –∞—Ä–µ–Ω–¥–Ω–∞—è –ø–ª–∞—Ç–∞?",
                    "hint": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å",
                    "options": ["–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", "–†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞", "–ï–∂–µ–≥–æ–¥–Ω–æ"]
                },
                {
                    "key": "contract_duration",
                    "question": "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–æ—Ä?",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –≥–æ–¥, 6 –º–µ—Å—è—Ü–µ–≤, 2 –≥–æ–¥–∞"
                }
            ],
            "sale": [
                {
                    "key": "seller_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                },
                {
                    "key": "buyer_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é)", 
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"
                },
                {
                    "key": "item_description",
                    "question": "–ß—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è? –û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å–¥–µ–ª–∫–∏",
                    "hint": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
                },
                {
                    "key": "sale_price",
                    "question": "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (–≤ —Ä—É–±–ª—è—Ö)",
                    "hint": "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500000"
                },
                {
                    "key": "payment_method",
                    "question": "–ö–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç–∞?",
                    "hint": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞",
                    "options": ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç", "–†–∞—Å—Å—Ä–æ—á–∫–∞", "–ò–ø–æ—Ç–µ–∫–∞"]
                }
            ]
        },
        "lawsuit": {
            "debt": [
                {
                    "key": "plaintiff_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∏—Å—Ç—Ü–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
                    "hint": "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –ª–∏—Ü–∞"
                },
                {
                    "key": "defendant_name", 
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—á–∏–∫–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)",
                    "hint": "–õ–∏—Ü–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∑—ã—Å–∫–∏–≤–∞–µ—Ç—Å—è –¥–æ–ª–≥"
                },
                {
                    "key": "debt_amount",
                    "question": "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞ (–≤ —Ä—É–±–ª—è—Ö)",
                    "hint": "–û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —à—Ç—Ä–∞—Ñ–æ–≤"
                },
                {
                    "key": "debt_basis",
                    "question": "–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —á–µ–≥–æ –≤–æ–∑–Ω–∏–∫ –¥–æ–ª–≥?",
                    "hint": "–î–æ–≥–æ–≤–æ—Ä, —Ä–∞—Å–ø–∏—Å–∫–∞, —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –∏ —Ç.–¥."
                },
                {
                    "key": "debt_date",
                    "question": "–ö–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –ø–æ–≥–∞—à–µ–Ω –¥–æ–ª–≥?",
                    "hint": "–î–∞—Ç–∞, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏"
                }
            ]
        },
        "claim": {
            "payment": [
                {
                    "key": "creditor_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∫—Ä–µ–¥–∏—Ç–æ—Ä)",
                    "hint": "–¢–æ—Ç, –∫–æ–º—É –¥–æ–ª–∂–Ω—ã –¥–µ–Ω—å–≥–∏"
                },
                {
                    "key": "debtor_name",
                    "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞",
                    "hint": "–¢–æ—Ç, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–Ω—å–≥–∏"
                },
                {
                    "key": "debt_amount",
                    "question": "–†–∞–∑–º–µ—Ä –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–≤ —Ä—É–±–ª—è—Ö)",
                    "hint": "–°—É–º–º–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞"
                },
                {
                    "key": "debt_reason",
                    "question": "–ü–æ –∫–∞–∫–æ–º—É –æ—Å–Ω–æ–≤–∞–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å?",
                    "hint": "–î–æ–≥–æ–≤–æ—Ä, —É—Å–ª—É–≥–∞, —Ç–æ–≤–∞—Ä –∏ —Ç.–¥."
                }
            ]
        }
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if doc_type in questions_map and doc_subtype in questions_map[doc_type]:
        return questions_map[doc_type][doc_subtype]
    
    # –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–µ—Ç
    return [
        {
            "key": "party1_name",
            "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã",
            "hint": "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        },
        {
            "key": "party2_name", 
            "question": "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã",
            "hint": "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        },
        {
            "key": "subject",
            "question": "–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç/—Å—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "hint": "–û —á–µ–º —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç"
        }
    ]


# –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def back_to_types(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /create
    update.message = query.message
    return await create_command(update, context)


async def back_to_subtypes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    doc_type = context.user_data['document_type']
    query.data = f"doctype_{doc_type}"
    
    return await document_type_selected(update, context)


async def cancel_document_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('document_data', None)
    context.user_data.pop('document_type', None)
    context.user_data.pop('document_subtype', None)
    context.user_data.pop('generated_document', None)
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create"
    )
    return ConversationHandler.END


async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å
    """
    if update.callback_query:
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("answer_"):
            # –í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            answer = query.data.replace("answer_", "")
            return await save_answer_and_continue(update, context, answer, is_callback=True)
        elif query.data == "custom_answer":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
            await query.message.reply_text(
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_custom")]
                ])
            )
            return DocumentStates.DATA_COLLECTION.value
        elif query.data == "prev_question":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            context.user_data['current_question'] = max(0, context.user_data.get('current_question', 0) - 1)
            return await ask_next_question(update, context, is_callback=True)
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        answer = update.message.text
        return await save_answer_and_continue(update, context, answer)


async def save_answer_and_continue(update: Update, context: ContextTypes.DEFAULT_TYPE, answer: str, is_callback: bool = False) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    """
    doc_type = context.user_data['document_type']
    doc_subtype = context.user_data['document_subtype']
    current_question = context.user_data.get('current_question', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞
    questions = get_questions_for_document(doc_type, doc_subtype)
    
    if current_question < len(questions):
        question_key = questions[current_question]['key']
        context.user_data['document_data'][question_key] = answer
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        confirmation_text = f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: *{answer}*"
        
        if is_callback:
            await update.callback_query.message.reply_text(
                confirmation_text,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                confirmation_text,
                parse_mode='Markdown'
            )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    context.user_data['current_question'] = current_question + 1
    return await ask_next_question(update, context, is_callback=is_callback)


async def start_document_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    doc_type = context.user_data['document_type']
    doc_subtype = context.user_data['document_subtype']
    document_data = context.user_data['document_data']
    
    doc_info = DOCUMENT_TYPES[doc_type]
    subtype_name = doc_info["subtypes"][doc_subtype]
    
    generation_text = (
        f"üéØ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_info['name']} - {subtype_name}**\n\n"
        "‚è≥ –°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...\n"
        "üìù –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç...\n\n"
        "*–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥*"
    )
    
    if is_callback:
        await update.callback_query.message.reply_text(
            generation_text,
            parse_mode='Markdown'
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await update.callback_query.message.chat.send_action(ChatAction.TYPING)
    else:
        await update.message.reply_text(
            generation_text,
            parse_mode='Markdown'
        )
        await update.message.chat.send_action(ChatAction.TYPING)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ GigaChat
        generated_document = await generate_document_with_gigachat(doc_type, doc_subtype, document_data)
        context.user_data['generated_document'] = generated_document
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return await show_generated_document(update, context, is_callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        error_text = (
            "‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="retry_generation")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.message.reply_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return DocumentStates.DOCUMENT_GENERATION.value


async def generate_document_with_gigachat(doc_type: str, doc_subtype: str, document_data: Dict[str, str]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é GigaChat API
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    system_prompt = get_document_generation_prompt(doc_type, doc_subtype)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    user_prompt = format_user_data_for_prompt(doc_type, doc_subtype, document_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    response = await gigachat_client.generate_document(system_prompt, user_prompt)
    
    return response


def get_document_generation_prompt(doc_type: str, doc_subtype: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    prompts = {
        "contract": {
            "rent": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö –∞—Ä–µ–Ω–¥—ã.
            
–°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ –∏ –¥–∞—Ç—ã
2. –î–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω (–∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä)
3. –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ —Å —Ç–æ—á–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–º—É—â–µ—Å—Ç–≤–∞
4. –†–∞–∑–º–µ—Ä –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã –∏ –ø–æ—Ä—è–¥–æ–∫ –µ–µ –≤–Ω–µ—Å–µ–Ω–∏—è
5. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
6. –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω
7. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω
8. –ü–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
9. –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω

–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, —Å–æ–±–ª—é–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.""",
            
            "sale": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏.
            
–°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ –∏ –¥–∞—Ç—ã
2. –î–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω (–ø—Ä–æ–¥–∞–≤–µ—Ü –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
3. –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
4. –¶–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤
5. –ü–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
6. –ü—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω
7. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω
8. –ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç
9. –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–æ—Ä–æ–Ω

–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, —Å–æ–±–ª—é–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é."""
        },
        "lawsuit": {
            "debt": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∏—Å–∫–æ–≤—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏—è—Ö.
            
–°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –¥–æ–ª–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É–¥–∞
2. –î–∞–Ω–Ω—ã–µ –∏—Å—Ç—Ü–∞ –∏ –æ—Ç–≤–µ—Ç—á–∏–∫–∞
3. –¶–µ–Ω–∞ –∏—Å–∫–∞
4. –û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
5. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
6. –ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∏–ª–∞–≥–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
7. –î–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å—å
8. –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –ì–ö –†–§ –∏ –ì–ü–ö –†–§

–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–≥–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, —Å–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."""
        },
        "claim": {
            "payment": """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –¥–æ—Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–µ—Ç–µ–Ω–∑–∏—è—Ö.
            
–°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–æ—Å—É–¥–µ–±–Ω—É—é –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –¥–æ–ª–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
1. –î–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –∏ –¥–æ–ª–∂–Ω–∏–∫–∞
2. –û—Å–Ω–æ–≤–∞–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –¥–æ–ª–≥–∞
3. –†–∞–∑–º–µ—Ä –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
4. –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –¥–æ–ª–≥–∞
5. –°—Ä–æ–∫ –¥–ª—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ 10 –¥–Ω–µ–π)
6. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ —Å—É–¥
7. –ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∏–ª–∞–≥–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
8. –î–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å—å

–¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º."""
        }
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –±–∞–∑–æ–≤—ã–π
    if doc_type in prompts and doc_subtype in prompts[doc_type]:
        return prompts[doc_type][doc_subtype]
    
    # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
    return """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç. –°–æ–∑–¥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.
    –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é."""


def format_user_data_for_prompt(doc_type: str, doc_subtype: str, document_data: Dict[str, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat
    """
    data_text = "–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
    
    for key, value in document_data.items():
        data_text += f"‚Ä¢ {key}: {value}\n"
    
    data_text += "\n–°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
    
    return data_text


async def show_generated_document(update: Update, context: ContextTypes.DEFAULT_TYPE, is_callback: bool = False) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    generated_document = context.user_data['generated_document']
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    max_length = 3500  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    display_document = generated_document
    
    if len(generated_document) > max_length:
        display_document = generated_document[:max_length] + "\n\n... (–¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
    
    result_text = (
        f"üìÑ **–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!**\n\n"
        f"```\n{display_document}\n```\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="accept_document")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_document")],
        [InlineKeyboardButton("‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="supplement_document")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_document")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if is_callback:
            await update.callback_query.message.reply_text(
                result_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                result_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
        result_text_plain = (
            f"üìÑ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!\n\n"
            f"{display_document}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if is_callback:
            await update.callback_query.message.reply_text(
                result_text_plain,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                result_text_plain,
                reply_markup=reply_markup
            )
    
    return DocumentStates.DOCUMENT_REVIEW.value


async def handle_document_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –≥–æ—Ç–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == "accept_document":
        return await finalize_document(update, context)
    elif query.data == "edit_document":
        return await start_document_editing(update, context)
    elif query.data == "supplement_document":
        return await start_document_supplement(update, context)
    elif query.data == "regenerate_document":
        return await regenerate_document(update, context)
    
    return DocumentStates.DOCUMENT_REVIEW.value


async def start_document_editing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    
    edit_text = (
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:\n"
        "‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        edit_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return DocumentStates.DOCUMENT_EDITING.value


async def start_document_supplement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    
    supplement_text = (
        "‚ûï **–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        "–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É:\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ –ù–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã\n"
        "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥–æ–≤–æ—Ä–∫–∏\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_supplement")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        supplement_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return DocumentStates.DOCUMENT_EDITING.value


async def process_document_changes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    user_changes = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.message.chat.send_action(ChatAction.TYPING)
    
    processing_text = (
        "üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...**\n\n"
        f"üìù –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è: *{user_changes}*\n\n"
        "‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É..."
    )
    
    await update.message.reply_text(
        processing_text,
        parse_mode='Markdown'
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        current_document = context.user_data['generated_document']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        edit_prompt = f"""
–ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:
{current_document}

–¢—Ä–µ–±—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
{user_changes}

–í–Ω–µ—Å–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        system_prompt = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç. –í–Ω–µ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
        
        updated_document = await generate_document_with_gigachat("edit", "changes", {"edit_prompt": edit_prompt})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        context.user_data['generated_document'] = updated_document
        
        success_text = (
            "‚úÖ **–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!**\n\n"
            "–î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(success_text, parse_mode='Markdown')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        return await show_generated_document(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
        error_text = (
            "‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="edit_document")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–æ–∫—É–º–µ–Ω—Ç—É", callback_data="show_document")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            error_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return DocumentStates.DOCUMENT_REVIEW.value


async def regenerate_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    
    await query.message.reply_text(
        "üîÑ **–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...**\n\n"
        "‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏...",
        parse_mode='Markdown'
    )
    
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    return await start_document_generation(update, context, is_callback=True)


async def finalize_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ DOCX –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    """
    query = update.callback_query
    
    finalization_text = (
        "üíæ **–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...**\n\n"
        "‚è≥ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª Word (.docx)...\n"
        "üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∫ –∑–∞–≥—Ä—É–∑–∫–µ...\n\n"
        "*–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥*"
    )
    
    await query.message.reply_text(
        finalization_text,
        parse_mode='Markdown'
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º DOCX —Ñ–∞–π–ª
        docx_file_path = await create_docx_document(context.user_data['generated_document'], context.user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(docx_file_path, 'rb') as doc_file:
            await query.message.reply_document(
                document=doc_file,
                filename=get_document_filename(context.user_data),
                caption=(
                    "üìÑ **–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!**\n\n"
                    "‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word (.docx)\n"
                    "üìÅ –ú–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n\n"
                    "üîç –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
                ),
                parse_mode='Markdown'
            )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
        return await request_document_rating(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: {e}")
        
        error_text = (
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DOCX —Ñ–∞–π–ª.\n"
            "–î–æ–∫—É–º–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —á–∞—Ç–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="retry_docx")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="show_document")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            error_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return DocumentStates.DOCUMENT_FINALIZATION.value


async def create_docx_document(document_text: str, user_data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç DOCX —Ñ–∞–π–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    try:
        from docx import Document
        from docx.shared import Inches
        import os
        import tempfile
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç Word
        doc = Document()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(1)
            section.bottom_margin = Inches(1)
            section.left_margin = Inches(1.25)
            section.right_margin = Inches(1.25)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = document_text.split('\n\n')
        
        for paragraph_text in paragraphs:
            if paragraph_text.strip():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                if (paragraph_text.strip().isupper() or 
                    paragraph_text.strip().startswith('–î–û–ì–û–í–û–†') or
                    paragraph_text.strip().startswith('–ò–°–ö–û–í–û–ï') or
                    paragraph_text.strip().startswith('–ü–†–ï–¢–ï–ù–ó–ò–Ø')):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    heading = doc.add_heading(paragraph_text.strip(), level=1)
                    heading.alignment = 1  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü
                    p = doc.add_paragraph(paragraph_text.strip())
                    p.alignment = 3  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = tempfile.gettempdir()
        filename = get_document_filename(user_data)
        file_path = os.path.join(temp_dir, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.save(file_path)
        
        return file_path
        
    except ImportError:
        # –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        raise Exception("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: {e}")


def get_document_filename(user_data: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    doc_type = user_data.get('document_type', 'document')
    doc_subtype = user_data.get('document_subtype', 'general')
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã –≤ —á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞
    type_names = {
        'contract': '–î–æ–≥–æ–≤–æ—Ä',
        'lawsuit': '–ò—Å–∫–æ–≤–æ–µ_–∑–∞—è–≤–ª–µ–Ω–∏–µ',
        'claim': '–ü—Ä–µ—Ç–µ–Ω–∑–∏—è',
        'agreement': '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ',
        'power_of_attorney': '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
        'application': '–ó–∞—è–≤–ª–µ–Ω–∏–µ',
        'protocol': '–ü—Ä–æ—Ç–æ–∫–æ–ª',
        'act': '–ê–∫—Ç'
    }
    
    subtype_names = {
        'rent': '–∞—Ä–µ–Ω–¥—ã',
        'sale': '–∫—É–ø–ª–∏_–ø—Ä–æ–¥–∞–∂–∏',
        'debt': '–≤–∑—ã—Å–∫–∞–Ω–∏–µ_–¥–æ–ª–≥–∞',
        'payment': '–≤–∑—ã—Å–∫–∞–Ω–∏–µ_–¥–æ–ª–≥–∞',
        'general': '–æ–±—â–∏–π'
    }
    
    type_name = type_names.get(doc_type, '–î–æ–∫—É–º–µ–Ω—Ç')
    subtype_name = subtype_names.get(doc_subtype, doc_subtype)
    
    import datetime
    date_str = datetime.datetime.now().strftime("%Y%m%d_%H%M")
    
    return f"{type_name}_{subtype_name}_{date_str}.docx"


async def request_document_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    rating_text = (
        "‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        "–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å!\n"
        "–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç 1 –¥–æ 5:"
    )
    
    keyboard = []
    for i in range(1, 6):
        stars = "‚≠ê" * i
        keyboard.append([InlineKeyboardButton(f"{stars} {i}", callback_data=f"rate_{i}")])
    
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="skip_rating")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        rating_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return DocumentStates.DOCUMENT_FINALIZATION.value


async def handle_document_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("rate_"):
        rating = int(query.data.replace("rate_", ""))
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ Supabase
        # await save_document_rating(context.user_data, rating)
        
        thank_you_text = (
            f"üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating} ‚≠ê**\n\n"
            "–í–∞—à–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!\n\n"
            "üìÑ **–ß—Ç–æ –µ—â–µ –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="new_document")],
            [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
    else:  # skip_rating
        thank_you_text = (
            "üëç **–ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ!**\n\n"
            "üìÑ **–ß—Ç–æ –µ—â–µ –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="new_document")],
            [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        thank_you_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    context.user_data.pop('document_data', None)
    context.user_data.pop('document_type', None)
    context.user_data.pop('document_subtype', None)
    context.user_data.pop('generated_document', None)
    
    return ConversationHandler.END