#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–±–µ–∑ Supabase) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
from enum import Enum
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

logger = logging.getLogger(__name__)


class SubscriptionStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    MAIN_MENU = 0
    SUBSCRIPTION_SELECTION = 1
    TRIAL_ACTIVATION = 2
    PAYMENT_PROCESSING = 3
    SUBSCRIPTION_MANAGEMENT = 4


async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    """
    try:
        # –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        fake_status = {
            'has_subscription': False,
            'subscription_type': None,
            'is_trial_used': False,
            'expires_at': None
        }
        
        return await show_subscription_options(update, context, fake_status)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscription_command: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        return ConversationHandler.END


async def show_subscription_options(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  status: Dict[str, Any]) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
    """
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if status['is_trial_used']:
        header = f"üíé **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, {user_name}!**\n\n"
        trial_info = "‚úÖ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω*\n\n"
    else:
        header = f"üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**\n\n"
        trial_info = (
            "üÜì **–ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î - 1 –î–ï–ù–¨:**\n"
            "‚Ä¢ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞\n" 
            "‚Ä¢ 1 –∞–Ω–∞–ª–∏–∑\n\n"
        )
    
    subscription_info = (
        "üíº **–ë–ê–ó–û–í–´–ô - 790‚ÇΩ/–º–µ—Å—è—Ü:**\n"
        "‚Ä¢ 25 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n"
        "‚Ä¢ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ 5 –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
        
        "üèÜ **–ü–†–ï–ú–ò–£–ú - 1490‚ÇΩ/–º–µ—Å—è—Ü:**\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n" 
        "‚Ä¢ 15 –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        
        "üíé **–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô - 3990‚ÇΩ/–º–µ—Å—è—Ü:**\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º\n"
        "‚Ä¢ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚Ä¢ API –¥–æ—Å—Ç—É–ø\n\n"
        
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:**"
    )
    
    message_text = header + trial_info + subscription_info
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
    if not status['is_trial_used']:
        keyboard.append([InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ë–ï–°–ü–õ–ê–¢–ù–û (1 –¥–µ–Ω—å)", callback_data="activate_trial")])
        keyboard.append([])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # –ö–Ω–æ–ø–∫–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard.extend([
        [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
        [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="subscribe_premium")],
        [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 3990‚ÇΩ/–º–µ—Å", callback_data="subscribe_corporate")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return SubscriptionStates.SUBSCRIPTION_SELECTION.value


async def activate_trial_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—ç–º—É–ª—è—Ü–∏—è)
    """
    query = update.callback_query
    await query.answer()
    
    message_text = (
        "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
        "‚úÖ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 02.07.2025\n\n"
        "üéØ **–î–æ—Å—Ç—É–ø–Ω–æ:**\n"
        "‚Ä¢ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
        "‚Ä¢ 1 –∞–Ω–∞–ª–∏–∑\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI-—é—Ä–∏—Å—Ç–∞!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="start_consult")],
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="start_create")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def initiate_subscription_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—ç–º—É–ª—è—Ü–∏—è)
    """
    query = update.callback_query
    await query.answer()
    
    subscription_type = query.data.replace("subscribe_", "")
    
    prices = {
        'basic': '790‚ÇΩ',
        'premium': '1490‚ÇΩ',
        'corporate': '3990‚ÇΩ'
    }
    
    names = {
        'basic': '–ë–∞–∑–æ–≤—ã–π',
        'premium': '–ü—Ä–µ–º–∏—É–º', 
        'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
    }
    
    price = prices.get(subscription_type)
    name = names.get(subscription_type)
    
    message_text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {name}**\n\n"
        f"üí∞ –°—É–º–º–∞: {price}/–º–µ—Å—è—Ü\n\n"
        "üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n"
        "https://yookassa.ru/checkout/payments/test-demo\n\n"
        "‚ö†Ô∏è *–≠—Ç–æ –¥–µ–º–æ-—Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_success_{subscription_type}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscription_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return SubscriptionStates.PAYMENT_PROCESSING.value


async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (—ç–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
    """
    query = update.callback_query
    await query.answer()
    
    subscription_type = query.data.replace("payment_success_", "")
    
    names = {
        'basic': '–ë–∞–∑–æ–≤—ã–π',
        'premium': '–ü—Ä–µ–º–∏—É–º',
        'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
    }
    
    name = names.get(subscription_type, subscription_type)
    
    message_text = (
        "üéâ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ **{name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
        "üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: 01.08.2025\n\n"
        "üöÄ **–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:**\n"
        "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-—é—Ä–∏—Å—Ç!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="start_consult")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscription_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def cancel_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    """
    return ConversationHandler.END


# –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
subscription_handlers = {
    "activate_trial": activate_trial_subscription,
    "subscribe_basic": initiate_subscription_payment,
    "subscribe_premium": initiate_subscription_payment,
    "subscribe_corporate": initiate_subscription_payment,
    "payment_success_basic": check_payment_status,
    "payment_success_premium": check_payment_status,
    "payment_success_corporate": check_payment_status,
} 