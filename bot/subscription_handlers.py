#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –±–æ—Ç–µ
"""

import logging
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from db_client.database import supabase_client
from payment_client.client import yookassa_client

logger = logging.getLogger(__name__)


class SubscriptionStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    MAIN_MENU = 0
    SUBSCRIPTION_SELECTION = 1
    TRIAL_ACTIVATION = 2
    PAYMENT_PROCESSING = 3
    SUBSCRIPTION_MANAGEMENT = 4


async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    """
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = await supabase_client.get_user_subscription_status(telegram_id)
        
        if status['has_subscription']:
            return await show_subscription_management(update, context, status)
        else:
            return await show_subscription_options(update, context, status)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscription_command –¥–ª—è {telegram_id}: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        return ConversationHandler.END


async def show_subscription_options(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  status: Dict[str, Any]) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if status['is_trial_used']:
        header = f"üíé **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, {user_name}!**\n\n"
        trial_info = "‚úÖ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω*\n\n"
    else:
        header = f"üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!**\n\n"
        trial_info = (
            "üÜì **–ë–ï–°–ü–õ–ê–¢–ù–´–ô –ü–†–û–ë–ù–´–ô –ü–ï–†–ò–û–î - 1 –î–ï–ù–¨:**\n"
            "‚Ä¢ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞\n" 
            "‚Ä¢ 1 –∞–Ω–∞–ª–∏–∑\n\n"
        )
    
    subscription_info = (
        "üíº **–ë–ê–ó–û–í–´–ô - 790‚ÇΩ/–º–µ—Å—è—Ü:**\n"
        "‚Ä¢ 25 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n"
        "‚Ä¢ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞\n"
        "‚Ä¢ 5 –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        
        "üèÜ **–ü–†–ï–ú–ò–£–ú - 1490‚ÇΩ/–º–µ—Å—è—Ü:** ‚≠ê *–ü–æ–ø—É–ª—è—Ä–Ω—ã–π*\n"
        "‚Ä¢ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** ‚ôæÔ∏è\n"
        "‚Ä¢ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ!)\n" 
        "‚Ä¢ 15 –∞–Ω–∞–ª–∏–∑–æ–≤ (–≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ!)\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
        
        "üíé **–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô - 3990‚ÇΩ/–º–µ—Å—è—Ü:**\n"
        "‚Ä¢ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** ‚ôæÔ∏è\n"
        "‚Ä¢ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã)\n"
        "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
        "‚Ä¢ API –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
        
        "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:**"
    )
    
    message_text = header + trial_info + subscription_info
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
    if not status['is_trial_used']:
        keyboard.append([InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ë–ï–°–ü–õ–ê–¢–ù–û (1 –¥–µ–Ω—å)", callback_data="activate_trial")])
        keyboard.append([])  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # –ö–Ω–æ–ø–∫–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard.extend([
        [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π ‚Äî 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
        [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º ‚Äî 1490‚ÇΩ/–º–µ—Å ‚≠ê", callback_data="subscribe_premium")],
        [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî 3990‚ÇΩ/–º–µ—Å", callback_data="subscribe_corporate")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return SubscriptionStates.SUBSCRIPTION_SELECTION.value


async def show_subscription_management(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     status: Dict[str, Any]) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_stats = await supabase_client.get_usage_stats(update.effective_user.id)
        
        subscription_type = status['subscription_type']
        expires_at = status['expires_at']
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
        type_names = {
            'trial': 'üÜì –ü—Ä–æ–±–Ω—ã–π',
            'basic': 'üíº –ë–∞–∑–æ–≤—ã–π',
            'premium': 'üèÜ –ü—Ä–µ–º–∏—É–º',
            'corporate': 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
        }
        
        type_name = type_names.get(subscription_type, subscription_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expires_str = expires_at.strftime("%d.%m.%Y –≤ %H:%M")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üìä **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {type_name}**\n\n"
            f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {expires_str}\n\n"
            "üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:**\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        consultations = usage_stats['consultations']
        documents = usage_stats['documents']
        analysis = usage_stats['analysis']
        
        def format_limit(used, limit):
            if limit == -1:
                return f"{used} (–±–µ–∑–ª–∏–º–∏—Ç)"
            else:
                return f"{used}/{limit}"
        
        message_text += (
            f"üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:** {format_limit(consultations['used'], consultations['limit'])}\n"
            f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** {format_limit(documents['used'], documents['limit'])}\n"
            f"üìä **–ê–Ω–∞–ª–∏–∑—ã:** {format_limit(analysis['used'], analysis['limit'])}\n\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –ª–∏–º–∏—Ç–∞–º
        warnings = []
        if consultations['limit'] != -1 and consultations['used'] >= consultations['limit'] * 0.8:
            warnings.append("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è")
        if documents['limit'] != -1 and documents['used'] >= documents['limit'] * 0.8:
            warnings.append("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è")
        if analysis['limit'] != -1 and analysis['used'] >= analysis['limit'] * 0.8:
            warnings.append("üìä –ê–Ω–∞–ª–∏–∑—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è")
        
        if warnings:
            message_text += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n" + "\n".join(f"‚Ä¢ {w}" for w in warnings) + "\n\n"
        
        if subscription_type == 'trial':
            message_text += (
                "üí° **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!**\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ AI-–Æ—Ä–∏—Å—Ç."
            )
        else:
            message_text += "üéõÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = []
        
        if subscription_type == 'trial':
            # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            keyboard.extend([
                [InlineKeyboardButton("‚≠ê –í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", callback_data="trial_upgrade_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        else:
            # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
            if subscription_type != 'corporate':  # –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ
                keyboard.append([InlineKeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="upgrade_menu")])
            
            keyboard.extend([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.edit_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        return SubscriptionStates.SUBSCRIPTION_MANAGEMENT.value
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_subscription_management: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."
        )
        return ConversationHandler.END


async def activate_trial_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    """
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        status = await supabase_client.get_user_subscription_status(telegram_id)
        
        if status['is_trial_used']:
            await query.message.edit_text(
                "‚ùå **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.",
                parse_mode='Markdown'
            )
            return await show_subscription_options(update, context, status)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = await supabase_client.create_trial_subscription(telegram_id)
        
        expires_at = datetime.fromisoformat(subscription['expires_at'].replace('Z', '+00:00'))
        
        success_message = (
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user_name}!**\n\n"
            "‚úÖ **–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞**\n\n"
            "üéØ **–ß—Ç–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–û:**\n"
            "üí¨ **3 —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** ‚Äî –∑–∞–¥–∞–π—Ç–µ –ª—é–±—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "üìÑ **2 –¥–æ–∫—É–º–µ–Ω—Ç–∞** ‚Äî –¥–æ–≥–æ–≤–æ—Ä—ã, –∑–∞—è–≤–ª–µ–Ω–∏—è, –∂–∞–ª–æ–±—ã –∏ –¥—Ä.\n"
            "üìä **1 –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞** ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—É\n\n"
            f"‚è∞ **–î–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç:** {expires_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!**\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî AI-–Æ—Ä–∏—Å—Ç –¥–∞—Å—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –†–§."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="menu_consult")],
            [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="menu_create")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data="menu_analyze")],
            [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data="subscription_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            success_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
        
        await query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END


async def initiate_subscription_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data
    subscription_type = query.data.replace('subscribe_', '').replace('upgrade_', '')
    
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        subscription_info = yookassa_client.get_subscription_info(subscription_type)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_data = await yookassa_client.create_payment(
            telegram_id=telegram_id,
            subscription_type=subscription_type
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
        await supabase_client.create_payment_record(
            telegram_id=telegram_id,
            subscription_type=subscription_type,
            yookassa_payment_id=payment_data['payment_id'],
            amount_kopecks=payment_data['amount'],
            payment_url=payment_data['confirmation_url']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['pending_payment'] = {
            'payment_id': payment_data['payment_id'],
            'subscription_type': subscription_type,
            'amount': payment_data['amount']
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
        type_names = {
            'basic': 'üíº –ë–∞–∑–æ–≤—ã–π',
            'premium': 'üèÜ –ü—Ä–µ–º–∏—É–º',
            'corporate': 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
        }
        
        type_name = type_names.get(subscription_type, subscription_type)
        price = subscription_info['price_rubles']
        
        payment_message = (
            f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {type_name}**\n\n"
            f"üí∞ **–°—É–º–º–∞:** {price:.0f} ‚ÇΩ\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** 1 –º–µ—Å—è—Ü\n\n"
            "üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa**\n\n"
            "üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **¬´üí≥ –û–ø–ª–∞—Ç–∏—Ç—å¬ª** –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ **¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_data['payment_id']}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            payment_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_data['payment_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, —Ç–∞—Ä–∏—Ñ {subscription_type}")
        return SubscriptionStates.PAYMENT_PROCESSING.value
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {telegram_id}: {e}")
        
        await query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END


async def check_payment_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    """
    query = update.callback_query
    await query.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º payment_id –∏–∑ callback_data
    payment_id = query.data.replace('check_payment_', '')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = await yookassa_client.get_payment_info(payment_id)
        
        if payment_info['status'] == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            metadata = payment_info['metadata']
            telegram_id = int(metadata['telegram_id'])
            subscription_type = metadata['subscription_type']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            pending_payment = context.user_data.get('pending_payment', {})
            is_renewal = pending_payment.get('is_renewal', False)
            
            if is_renewal:
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                subscription = await supabase_client.renew_subscription(
                    telegram_id=telegram_id,
                    payment_id=payment_id
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                subscription = await supabase_client.create_paid_subscription(
                    telegram_id=telegram_id,
                    subscription_type=subscription_type,
                    payment_id=payment_id
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            await supabase_client.update_payment_status(payment_id, 'succeeded')
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            context.user_data.pop('payment_check_count', None)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            type_names = {
                'basic': 'üíº –ë–∞–∑–æ–≤—ã–π',
                'premium': 'üèÜ –ü—Ä–µ–º–∏—É–º', 
                'corporate': 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
            }
            
            type_name = type_names.get(subscription_type, subscription_type)
            expires_at = datetime.fromisoformat(subscription['expires_at'].replace('Z', '+00:00'))
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            limits_map = {
                'basic': {'consultations': 25, 'documents': 10, 'analysis': 5},
                'premium': {'consultations': '–±–µ–∑–ª–∏–º–∏—Ç', 'documents': 30, 'analysis': 15},
                'corporate': {'consultations': '–±–µ–∑–ª–∏–º–∏—Ç', 'documents': 100, 'analysis': 50}
            }
            
            limits = limits_map.get(subscription_type, {})
            
            if is_renewal:
                success_message = (
                    f"üéâ **–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!**\n\n"
                    f"‚úÖ **–¢–∞—Ä–∏—Ñ:** {type_name}\n"
                    f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {expires_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                    "üöÄ **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI-–Æ—Ä–∏—Å—Ç!**"
                )
            else:
                success_message = (
                    f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {type_name}!**\n\n"
                    f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ**\n"
                    f"üìÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {expires_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                    f"üéØ **–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                )
                
                if limits:
                    success_message += (
                        f"üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:** {limits.get('consultations', '–Ω/–¥')}\n"
                        f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** {limits.get('documents', '–Ω/–¥')}\n"
                        f"üìä **–ê–Ω–∞–ª–∏–∑—ã:** {limits.get('analysis', '–Ω/–¥')}\n\n"
                    )
                
                success_message += (
                    "üöÄ **–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?**\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é ‚Äî —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI-–Æ—Ä–∏—Å—Ç!"
                )
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="menu_consult")],
                [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="menu_create")],
                [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                success_message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return ConversationHandler.END
            
        elif payment_info['status'] in ['pending', 'waiting_for_capture']:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_count = context.user_data.get('payment_check_count', 0) + 1
            context.user_data['payment_check_count'] = check_count
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
            if check_count <= 1:
                message = (
                    "‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂...**\n\n"
                    "–ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                )
            elif check_count <= 3:
                message = (
                    "‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...**\n\n"
                    f"üìä **–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** {check_count}\n"
                    f"üìã **–°—Ç–∞—Ç—É—Å:** {payment_info['status']}\n\n"
                    "‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5-10 –º–∏–Ω—É—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –¥–æ–ª—å—à–µ."
                )
            else:
                message = (
                    "‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                    f"üìä **–ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:** {check_count}\n"
                    f"üìã **–°—Ç–∞—Ç—É—Å:** {payment_info['status']}\n\n"
                    "‚ö†Ô∏è –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç:\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç—ã –≤ –±–∞–Ω–∫–µ\n"
                    "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @AI_support_users\n\n"
                    "üîÑ –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ."
                )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
            ]
            
            # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
            if check_count >= 3:
                keyboard.append([InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø–ª–∞—Ç—É", callback_data="subscription_menu")])
            
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            try:
                await query.message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback query
                if "not modified" in str(edit_error).lower():
                    await query.answer(
                        f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ #{check_count}: –ø–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", 
                        show_alert=True
                    )
                else:
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                    await query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)
            
            return SubscriptionStates.PAYMENT_PROCESSING.value
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
            await query.message.edit_text(
                f"‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª**\n\n"
                f"–°—Ç–∞—Ç—É—Å: {payment_info['status']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="subscription_menu")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        try:
            await query.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='Markdown'
            )
        except Exception as edit_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        
        return ConversationHandler.END


async def show_upgrade_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
    """
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = await supabase_client.get_user_subscription_status(telegram_id)
        current_type = status['subscription_type']
        
        message_text = "‚¨ÜÔ∏è **–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞**\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:\n\n"
        
        keyboard = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤—ã—à–µ–Ω–∏—è
        if current_type == 'trial':
            keyboard.extend([
                [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="upgrade_basic")],
                [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="upgrade_premium")],
                [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 3990‚ÇΩ/–º–µ—Å", callback_data="upgrade_corporate")]
            ])
        elif current_type == 'basic':
            keyboard.extend([
                [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="upgrade_premium")],
                [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 3990‚ÇΩ/–º–µ—Å", callback_data="upgrade_corporate")]
            ])
        elif current_type == 'premium':
            keyboard.extend([
                [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 3990‚ÇΩ/–º–µ—Å", callback_data="upgrade_corporate")]
            ])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscription_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return SubscriptionStates.SUBSCRIPTION_SELECTION.value
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_upgrade_menu: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞.")
        return ConversationHandler.END


async def show_trial_upgrade_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_stats = await supabase_client.get_usage_stats(telegram_id)
        
        message_text = (
            f"‚≠ê **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, {user_name}!**\n\n"
            "üÜì **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è** ‚Äî –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ!\n\n"
            "üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:**\n\n"
            
            "üíº **–ë–ê–ó–û–í–´–ô ‚Äî 790‚ÇΩ/–º–µ—Å—è—Ü**\n"
            "‚Ä¢ 25 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (—Å–µ–π—á–∞—Å —É –≤–∞—Å: 3)\n"
            "‚Ä¢ 10 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å–µ–π—á–∞—Å —É –≤–∞—Å: 2)\n"
            "‚Ä¢ 5 –∞–Ω–∞–ª–∏–∑–æ–≤ (—Å–µ–π—á–∞—Å —É –≤–∞—Å: 1)\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            
            "üèÜ **–ü–†–ï–ú–ò–£–ú ‚Äî 1490‚ÇΩ/–º–µ—Å—è—Ü** ‚≠ê *–ü–æ–ø—É–ª—è—Ä–Ω—ã–π*\n"
            "‚Ä¢ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** ‚ôæÔ∏è\n"
            "‚Ä¢ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ 15 —Ä–∞–∑ –±–æ–ª—å—à–µ!)\n"
            "‚Ä¢ 15 –∞–Ω–∞–ª–∏–∑–æ–≤ (–≤ 15 —Ä–∞–∑ –±–æ–ª—å—à–µ!)\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            
            "üíé **–ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô ‚Äî 3990‚ÇΩ/–º–µ—Å—è—Ü**\n"
            "‚Ä¢ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** ‚ôæÔ∏è\n"
            "‚Ä¢ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ 50 —Ä–∞–∑ –±–æ–ª—å—à–µ!)\n"
            "‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ (–≤ 50 —Ä–∞–∑ –±–æ–ª—å—à–µ!)\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "‚Ä¢ API –¥–æ—Å—Ç—É–ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª–µ–Ω —Ç–∞—Ä–∏—Ñ **–ü—Ä–µ–º–∏—É–º** ‚Äî "
            "–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ + —â–µ–¥—Ä—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíº –í—ã–±—Ä–∞—Ç—å –ë–∞–∑–æ–≤—ã–π ‚Äî 790‚ÇΩ", callback_data="subscribe_basic")],
            [InlineKeyboardButton("üèÜ –í—ã–±—Ä–∞—Ç—å –ü—Ä–µ–º–∏—É–º ‚Äî 1490‚ÇΩ", callback_data="subscribe_premium")],
            [InlineKeyboardButton("üíé –í—ã–±—Ä–∞—Ç—å –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π ‚Äî 3990‚ÇΩ", callback_data="subscribe_corporate")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="subscription_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return SubscriptionStates.SUBSCRIPTION_SELECTION.value
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_trial_upgrade_menu: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤.")
        return ConversationHandler.END


async def renew_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ—Ç –∂–µ —Ç–∞—Ä–∏—Ñ
    """
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        status = await supabase_client.get_user_subscription_status(telegram_id)
        
        if not status['has_subscription']:
            await query.message.edit_text(
                "‚ùå **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
            
        subscription_type = status['subscription_type']
        
        # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å
        if subscription_type == 'trial':
            await query.message.edit_text(
                "‚ùå **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–∏—Ç—å**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
                    [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="subscribe_premium")],
                    [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π - 3990‚ÇΩ/–º–µ—Å", callback_data="subscribe_corporate")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscription_menu")]
                ]),
                parse_mode='Markdown'
            )
            return SubscriptionStates.SUBSCRIPTION_SELECTION.value
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        subscription_info = yookassa_client.get_subscription_info(subscription_type)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        payment_data = await yookassa_client.create_payment(
            telegram_id=telegram_id,
            subscription_type=subscription_type
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
        await supabase_client.create_payment_record(
            telegram_id=telegram_id,
            subscription_type=subscription_type,
            yookassa_payment_id=payment_data['payment_id'],
            amount_kopecks=payment_data['amount'],
            payment_url=payment_data['confirmation_url']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['pending_payment'] = {
            'payment_id': payment_data['payment_id'],
            'subscription_type': subscription_type,
            'amount': payment_data['amount'],
            'is_renewal': True  # –§–ª–∞–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
        type_names = {
            'basic': 'üíº –ë–∞–∑–æ–≤—ã–π',
            'premium': 'üèÜ –ü—Ä–µ–º–∏—É–º',
            'corporate': 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
        }
        
        type_name = type_names.get(subscription_type, subscription_type)
        price = subscription_info['price_rubles']
        expires_at = status['expires_at']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        new_expires_at = expires_at + timedelta(days=30)
        
        renewal_message = (
            f"üîÑ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {type_name}**\n\n"
            f"üí∞ **–°—É–º–º–∞:** {price:.0f} ‚ÇΩ\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** 1 –º–µ—Å—è—Ü\n\n"
            f"‚è∞ **–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {expires_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üÜï **–ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ:** {new_expires_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            "üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa**\n\n"
            "üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ **¬´üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ¬ª** –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ **¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª**"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", url=payment_data['confirmation_url'])],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_data['payment_id']}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            renewal_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return SubscriptionStates.PAYMENT_PROCESSING.value
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
        
        await query.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='Markdown'
        )
        return ConversationHandler.END


async def cancel_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    """
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    context.user_data.pop('pending_payment', None)
    context.user_data.pop('payment_check_count', None)
    
    await query.message.edit_text(
        "‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode='Markdown'
    )
    
    logger.info(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    return ConversationHandler.END


# –ì–ª–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
subscription_handlers = {
    'subscription_menu': subscription_command,
    'activate_trial': activate_trial_subscription,
    'subscribe_basic': initiate_subscription_payment,
    'subscribe_premium': initiate_subscription_payment,
    'subscribe_corporate': initiate_subscription_payment,
    'upgrade_basic': initiate_subscription_payment,
    'upgrade_premium': initiate_subscription_payment,
    'upgrade_corporate': initiate_subscription_payment,
    'upgrade_menu': show_upgrade_menu,
    'renew_subscription': renew_subscription,
    'cancel_payment': cancel_payment,
    'trial_upgrade_menu': show_trial_upgrade_menu,
} 