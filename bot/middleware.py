#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤
"""

import logging
from functools import wraps
from typing import Callable, Any, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from db_client.database import supabase_client

logger = logging.getLogger(__name__)


def subscription_required(action_type: str, friendly_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('consultation', 'document', 'analysis')
        friendly_name: –ü–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    def decorator(handler_func: Callable):
        @wraps(handler_func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            telegram_id = update.effective_user.id
            action_friendly = friendly_name or action_type
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                can_use, usage_info = await supabase_client.check_and_log_usage(
                    telegram_id=telegram_id,
                    action_type=action_type,
                    details={
                        'user_name': update.effective_user.first_name,
                        'username': update.effective_user.username
                    }
                )
                
                if can_use:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context.user_data['usage_info'] = usage_info
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    return await handler_func(update, context, *args, **kwargs)
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                    return await handle_usage_limit_error(update, context, usage_info, action_friendly)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                error_message = (
                    "‚ö†Ô∏è **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                
                if update.callback_query:
                    await update.callback_query.message.reply_text(error_message, parse_mode='Markdown')
                else:
                    await update.message.reply_text(error_message, parse_mode='Markdown')
                
                return None
        
        return wrapper
    return decorator


async def handle_usage_limit_error(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 usage_info: Dict[str, Any], action_name: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    error_type = usage_info.get('error')
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if error_type == 'no_subscription':
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        trial_used = usage_info.get('trial_used', False)
        
        if trial_used:
            message = (
                f"üîí **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞, {user_name}**\n\n"
                f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ **{action_name}** –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n\n"
                "üí° **–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:**"
            )
            
            keyboard = [
                [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
                [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="subscribe_premium")],
                [InlineKeyboardButton("üìä –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data="subscription_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            message = (
                f"üéØ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, {user_name}!**\n\n"
                f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ **{action_name}** –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                "üÜì **–ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ 1 –¥–µ–Ω—å:**\n"
                "‚Ä¢ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
                "‚Ä¢ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                "‚Ä¢ 1 –∞–Ω–∞–ª–∏–∑"
            )
            
            keyboard = [
                [InlineKeyboardButton("üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ë–ï–°–ü–õ–ê–¢–ù–û", callback_data="activate_trial")],
                [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
                [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="subscribe_premium")],
                [InlineKeyboardButton("üìä –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data="subscription_menu")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
    elif error_type == 'limit_exceeded':
        # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        subscription_type = usage_info.get('subscription_type')
        used = usage_info.get('used', 0)
        limit = usage_info.get('limit', 0)
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
        type_names = {
            'trial': 'üÜì –ü—Ä–æ–±–Ω—ã–π',
            'basic': 'üíº –ë–∞–∑–æ–≤—ã–π', 
            'premium': 'üèÜ –ü—Ä–µ–º–∏—É–º',
            'corporate': 'üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
        }
        
        current_plan = type_names.get(subscription_type, subscription_type)
        
        message = (
            f"üìä **–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, {user_name}**\n\n"
            f"üéØ **–î–µ–π—Å—Ç–≤–∏–µ:** {action_name}\n"
            f"üìã **–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:** {current_plan}\n"
            f"üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {used}/{limit}\n\n"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
        if subscription_type == 'trial':
            message += "üí° **–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:**"
            keyboard = [
                [InlineKeyboardButton("üíº –ë–∞–∑–æ–≤—ã–π - 790‚ÇΩ/–º–µ—Å", callback_data="subscribe_basic")],
                [InlineKeyboardButton("üèÜ –ü—Ä–µ–º–∏—É–º - 1490‚ÇΩ/–º–µ—Å", callback_data="subscribe_premium")],
                [InlineKeyboardButton("üìä –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã", callback_data="subscription_menu")]
            ]
        elif subscription_type == 'basic':
            message += "‚¨ÜÔ∏è **–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –ü—Ä–µ–º–∏—É–º –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:**"
            keyboard = [
                [InlineKeyboardButton("üèÜ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ü—Ä–µ–º–∏—É–º", callback_data="upgrade_premium")],
                [InlineKeyboardButton("üíé –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ", callback_data="upgrade_corporate")],
                [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_menu")]
            ]
        else:
            message += "üîÑ **–õ–∏–º–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ.**"
            keyboard = [
                [InlineKeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="upgrade_menu")],
                [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_menu")]
            ]
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
        message = (
            f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞, {user_name}**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: **{action_name}**\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription_menu")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def show_usage_warning(update: Update, context: ContextTypes.DEFAULT_TYPE,
                           usage_info: Dict[str, Any], action_name: str) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
    """
    subscription_type = usage_info.get('subscription_type')
    used = usage_info.get('used', 0)
    limit = usage_info.get('limit', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if limit == -1:  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        return
    
    remaining = limit - used
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞—Ç–∫–µ 20% –∏–ª–∏ –º–µ–Ω—å—à–µ
    if remaining <= limit * 0.2 and remaining > 0:
        warning_message = (
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ: –ª–∏–º–∏—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è**\n\n"
            f"üìä **{action_name}:** {used}/{limit}\n"
            f"üìâ **–û—Å—Ç–∞–ª–æ—Å—å:** {remaining}\n\n"
            "üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="upgrade_menu")],
            [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="subscription_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.reply_text(
                warning_message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                warning_message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )


def add_usage_info_to_response(original_response: str, usage_info: Dict[str, Any]) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É
    """
    if not usage_info.get('success'):
        return original_response
    
    subscription_type = usage_info.get('subscription_type')
    used = usage_info.get('used', 0)
    limit = usage_info.get('limit', 0)
    
    # –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if limit == -1:
        return original_response
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    type_names = {
        'trial': 'üÜì',
        'basic': 'üíº',
        'premium': 'üèÜ',
        'corporate': 'üíé'
    }
    
    type_icon = type_names.get(subscription_type, 'üìä')
    
    usage_footer = f"\n\n---\n{type_icon} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{limit}"
    
    return original_response + usage_footer


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def check_subscription_status(telegram_id: int) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        return await supabase_client.get_user_subscription_status(telegram_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
        return {
            'has_subscription': False,
            'subscription_type': None,
            'is_trial_used': False,
            'expires_at': None
        } 