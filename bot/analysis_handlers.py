#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import logging
import os
import tempfile
import re
import asyncio
from enum import Enum
from typing import Dict, Any, List, Optional, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ChatAction

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
import fitz  # PyMuPDF
from docx import Document as DocxDocument
import pytesseract
from PIL import Image
import PyPDF2

from ai_gigachat.client import gigachat_client

logger = logging.getLogger(__name__)


class AnalysisStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    DOCUMENT_UPLOAD = 0
    ANALYSIS_TYPE_SELECTION = 1
    TEXT_PROCESSING = 2
    ANALYSIS_PROCESSING = 3
    RESULTS_REVIEW = 4
    ADDITIONAL_ACTIONS = 5


# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = {
    'document': ['.doc', '.docx', '.pdf'],
    'image': ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10 –ú–ë)
MAX_FILE_SIZE = 10 * 1024 * 1024

# –¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∞–º –≤ GigaChat –∫–ª–∏–µ–Ω—Ç–µ)
ANALYSIS_TYPES = {
    'document_summary': {
        'name': 'üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'description': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        'icon': 'üìã'
    },
    'law_compliance': {
        'name': '‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—É',
        'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§',
        'icon': '‚öñÔ∏è'
    },
    'error_detection': {
        'name': 'üîç –ù–∞–π—Ç–∏ –æ—à–∏–±–∫–∏',
        'description': '–ü–æ–∏—Å–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ',
        'icon': 'üîç'
    },
    'risk_assessment': {
        'name': '‚ö†Ô∏è –û—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫–∏',
        'description': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º',
        'icon': '‚ö†Ô∏è'
    },
    'recommendations': {
        'name': 'üí° –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        'description': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        'icon': 'üí°'
    },
    'correspondence_analysis': {
        'name': 'üìß –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É',
        'description': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
        'icon': 'üìß'
    }
}


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze - –Ω–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    user = update.effective_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    welcome_text = (
        f"üìä **–ê–Ω–∞–ª–∏–∑ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
        
        "üìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        "‚Ä¢ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** DOC, DOCX, PDF\n"
        "‚Ä¢ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** JPG, PNG (—Å–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
        "‚Ä¢ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 10 –ú–ë\n\n"
        
        "üéØ **–¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:**\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω—É\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –∏ –Ω–µ–¥–æ—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
        
        "üìé **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    return AnalysisStates.DOCUMENT_UPLOAD.value


async def handle_document_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.message.chat.send_action(ChatAction.TYPING)
    
    document = update.message.document
    photo = update.message.photo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª
    if not document and not photo:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ DOC, DOCX, PDF - –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ JPG, PNG - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–∫–∞–Ω—ã)\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë",
            parse_mode='Markdown'
        )
        return AnalysisStates.DOCUMENT_UPLOAD.value
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if document:
        file_name = document.file_name
        file_size = document.file_size
        file_id = document.file_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n"
                f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                parse_mode='Markdown'
            )
            return AnalysisStates.DOCUMENT_UPLOAD.value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(file_name.lower())[1]
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if file_extension in SUPPORTED_EXTENSIONS['image']:
            file_type = 'image'
        elif file_extension in SUPPORTED_EXTENSIONS['document']:
            file_type = 'document'
        else:
            await update.message.reply_text(
                f"‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
                f"–§–∞–π–ª: `{file_name}`\n"
                f"–§–æ—Ä–º–∞—Ç: `{file_extension}`\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** DOC, DOCX, PDF\n"
                "‚Ä¢ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** JPG, PNG, BMP, TIFF\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                parse_mode='Markdown'
            )
            return AnalysisStates.DOCUMENT_UPLOAD.value
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    else:  # photo
        # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo_file = photo[-1]
        file_size = photo_file.file_size
        file_id = photo_file.file_id
        file_name = f"image_{photo_file.file_id}.jpg"
        file_extension = '.jpg'
        file_type = 'image'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ**\n\n"
                f"–†–∞–∑–º–µ—Ä: {file_size / (1024*1024):.1f} –ú–ë\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
                parse_mode='Markdown'
            )
            return AnalysisStates.DOCUMENT_UPLOAD.value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    context.user_data['file_info'] = {
        'file_id': file_id,
        'file_name': file_name,
        'file_size': file_size,
        'file_extension': file_extension,
        'file_type': file_type
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
        "üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...",
        parse_mode='Markdown'
    )
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_message.edit_text(
            "üîÑ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...**\n\n"
            f"üìÑ {'üñºÔ∏è –°–∫–∞–Ω–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' if file_type == 'image' else 'üìù –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞...'}\n"
            "‚è≥ *–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥*",
            parse_mode='Markdown'
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        extracted_text = await extract_text_from_file(context.user_data['file_info'])
        
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (OCR) –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ
        min_length = 3 if file_type == 'image' else 10
        
        if not extracted_text or len(extracted_text.strip()) < min_length:
            # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ OCR –≤–µ—Ä–Ω—É–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if file_type == 'image' and extracted_text and "OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –æ—á–µ–Ω—å –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞" in extracted_text:
                pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –¥–ª—è –æ—à–∏–±–∫–∏
                error_keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="retry_upload")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞", callback_data="back_to_upload")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                
                await processing_message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
                    "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                    "‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∞\n"
                    "‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                    "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞\n\n"
                    "**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
                    reply_markup=InlineKeyboardMarkup(error_keyboard),
                    parse_mode='Markdown'
                )
                return AnalysisStates.DOCUMENT_UPLOAD.value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        context.user_data['document_text'] = extracted_text
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        file_icon = "üñºÔ∏è" if file_type == 'image' else "üìÑ"
        success_text = "‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        
        if file_type == 'image':
            success_text += f"{file_icon} **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** {file_name}\n"
            success_text += f"üìä **–†–∞–∑–º–µ—Ä:** {file_size / 1024 / 1024:.1f} –ú–ë\n"
            success_text += f"üî§ **–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:** {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            if "OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –æ—á–µ–Ω—å –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞" in extracted_text:
                success_text += "\n‚ö†Ô∏è *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –Ω–æ –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–µ–Ω*"
        else:
            success_text += f"{file_icon} **–§–∞–π–ª:** {file_name}\n"
            success_text += f"üìä **–†–∞–∑–º–µ—Ä:** {file_size / 1024 / 1024:.1f} –ú–ë\n"
            success_text += f"üìù **–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:** {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤"
        
        await processing_message.edit_text(
            success_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        error_keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="retry_upload")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞", callback_data="back_to_upload")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await processing_message.edit_text(
            "‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n\n"
            "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è",
            reply_markup=InlineKeyboardMarkup(error_keyboard),
            parse_mode='Markdown'
        )
        return AnalysisStates.DOCUMENT_UPLOAD.value
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
    keyboard = create_analysis_keyboard()
    
    await update.message.reply_text(
        f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω:** {file_name}\n\n"
        f"üìä **–†–∞–∑–º–µ—Ä:** {file_size / 1024 / 1024:.1f} –ú–ë\n"
        f"üìù **–¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω:** {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    return AnalysisStates.ANALYSIS_TYPE_SELECTION.value


async def handle_analysis_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("analysis_type_"):
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_type = query.data.replace("analysis_type_", "")
        
        if analysis_type not in ANALYSIS_TYPES:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        context.user_data['analysis_type'] = analysis_type
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        if analysis_type == 'document_summary':
            # –ù–ï –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            progress_msg = await query.message.reply_text("‚è≥ –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text = context.user_data.get('document_text', '')
            if not document_text:
                await query.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                return
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                analysis_result = await gigachat_client.analyze_document(
                    document_text, 
                    analysis_type
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await progress_msg.edit_text("‚úÖ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                context.user_data['summary_done'] = True
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
                keyboard = create_other_analysis_keyboard()
                
                await query.message.reply_text(
                    analysis_result,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return
            except Exception as e:
                await query.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.",
                    parse_mode='Markdown'
                )
                return
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        analysis_info = ANALYSIS_TYPES[analysis_type]
        
        # –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        if context.user_data.get('summary_done'):
            # –ù–ï –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            progress_msg = await query.message.reply_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document_text = context.user_data.get('document_text') or context.user_data.get('extracted_text', '')
            if not document_text:
                await query.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                return
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                analysis_result = await gigachat_client.analyze_document(
                    document_text, 
                    analysis_type
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await progress_msg.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                keyboard = [
                    [InlineKeyboardButton("üìä –î—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞", callback_data="back_to_analysis_types")],
                    [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_analysis")]
                ]
                
                await query.message.reply_text(
                    analysis_result,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                return
            except Exception as e:
                await query.message.reply_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞.",
                    parse_mode='Markdown'
                )
                return
        
        # –î–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–±–µ–∑ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="back_to_analysis_types")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")]
        ]
        
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            f"**{analysis_info['icon']} {analysis_info['name']}**\n\n"
            f"{analysis_info['description']}\n\n"
            "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    elif query.data == "start_analysis":
        # –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        progress_msg = await query.message.reply_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        analysis_type = context.user_data.get('analysis_type')
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        document_text = context.user_data.get('document_text') or context.user_data.get('extracted_text', '')
        
        if not analysis_type or not document_text:
            await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
            return
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_result = await gigachat_client.analyze_document(
                document_text, 
                analysis_type
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await progress_msg.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            keyboard = [
                [InlineKeyboardButton("üìä –î—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞", callback_data="back_to_analysis_types")],
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_analysis")]
            ]
            
            await query.message.reply_text(
                analysis_result,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            await query.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                parse_mode='Markdown'
            )
            return AnalysisStates.RESULTS_REVIEW.value
    
    elif query.data == "back_to_analysis_types":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if context.user_data.get('summary_done'):
            # –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
            keyboard = create_other_analysis_keyboard()
        else:
            # –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = create_analysis_keyboard()
        
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            "**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif query.data == "change_analysis_type":
        # –î–û–ë–ê–í–õ–Ø–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if context.user_data.get('summary_done'):
            keyboard = create_other_analysis_keyboard()
        else:
            keyboard = create_analysis_keyboard()
        
        await query.message.reply_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif query.data == "cancel_analysis":
        # –î–û–ë–ê–í–õ–Ø–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
        return await cancel_analysis(update, context)
    
    elif query.data == "back_to_menu":
        # –î–û–ë–ê–í–õ–Ø–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö!
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ cancel_analysis
        return await cancel_analysis(update, context)
    
    elif query.data == "retry_upload":
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        await query.message.reply_text(
            "üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ:\n\n"
            "üìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ **–î–æ–∫—É–º–µ–Ω—Ç—ã:** DOC, DOCX, PDF\n"
            "‚Ä¢ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:** JPG, PNG (—Å–∫–∞–Ω—ã)\n"
            "‚Ä¢ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 10 –ú–ë",
            parse_mode='Markdown'
        )
        return AnalysisStates.DOCUMENT_UPLOAD.value
    
    elif query.data == "back_to_upload":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return await analyze_command(update, context)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler!
    return AnalysisStates.ANALYSIS_TYPE_SELECTION.value


async def start_text_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.callback_query.message.chat.send_action(ChatAction.TYPING)
    
    file_info = context.user_data['file_info']
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    processing_text = (
        f"üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        f"üìÑ **–§–∞–π–ª:** `{file_info['file_name']}`\n"
        f"üìè **–†–∞–∑–º–µ—Ä:** {file_info['file_size'] / 1024:.1f} –ö–ë\n"
        f"üìù **–¢–∏–ø:** {'–î–æ–∫—É–º–µ–Ω—Ç' if file_info['file_type'] == 'document' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫–∞–Ω)'}\n\n"
        
        "üîç **–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
        "‚ñ∂Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...\n"
        "‚è∏Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n"
        "‚è∏Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n\n"
        
        "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*"
    )
    
    progress_message = await update.callback_query.message.reply_text(
        processing_text,
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    context.user_data['progress_message'] = progress_message
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        extracted_text = await extract_text_from_file(file_info)
        
        if not extracted_text or len(extracted_text.strip()) < 10:
            await update.callback_query.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∞\n"
                "‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
                parse_mode='Markdown'
            )
            return AnalysisStates.DOCUMENT_UPLOAD.value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        context.user_data['extracted_text'] = extracted_text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_message = context.user_data.get('progress_message')
        if progress_message:
            updated_progress = (
                f"üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
                f"üìÑ **–§–∞–π–ª:** `{file_info['file_name']}`\n"
                f"üìè **–†–∞–∑–º–µ—Ä:** {file_info['file_size'] / 1024:.1f} –ö–ë\n"
                f"üìù **–¢–∏–ø:** {'–î–æ–∫—É–º–µ–Ω—Ç' if file_info['file_type'] == 'document' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫–∞–Ω)'}\n\n"
                
                "üîç **–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
                "‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
                "‚ñ∂Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...\n"
                "‚è∏Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n\n"
                
                "‚è≥ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...*"
            )
            
            try:
                await progress_message.edit_text(
                    updated_progress,
                    parse_mode='Markdown'
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        words_count = len(extracted_text.split())
        chars_count = len(extracted_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        if chars_count > 1000:
            quality_indicator = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif chars_count > 300:
            quality_indicator = "üü° –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        else:
            quality_indicator = "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        
        stats_message = (
            f"‚úÖ **–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω**\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:**\n"
            f"‚Ä¢ **–°–∏–º–≤–æ–ª–æ–≤:** {chars_count:,}\n"
            f"‚Ä¢ **–°–ª–æ–≤:** {words_count:,}\n"
            f"‚Ä¢ **–ö–∞—á–µ—Å—Ç–≤–æ:** {quality_indicator}\n\n"
            "üß† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ..."
        )
        
        await update.callback_query.message.reply_text(
            stats_message,
            parse_mode='Markdown'
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É
        return await start_analysis_processing(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            parse_mode='Markdown'
        )
        return ConversationHandler.END


async def start_analysis_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GigaChat
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.callback_query.message.chat.send_action(ChatAction.TYPING)
    
    analysis_type = context.user_data['analysis_type']
    extracted_text = context.user_data['extracted_text']
    analysis_info = ANALYSIS_TYPES[analysis_type]
    file_info = context.user_data['file_info']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_message = context.user_data.get('progress_message')
    if progress_message:
        final_progress = (
            f"üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
            f"üìÑ **–§–∞–π–ª:** `{file_info['file_name']}`\n"
            f"üìè **–†–∞–∑–º–µ—Ä:** {file_info['file_size'] / 1024:.1f} –ö–ë\n"
            f"üìù **–¢–∏–ø:** {'–î–æ–∫—É–º–µ–Ω—Ç' if file_info['file_type'] == 'document' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫–∞–Ω)'}\n\n"
            
            "üîç **–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
            "‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n"
            "‚ñ∂Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...\n\n"
            
            "üß† *–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...*"
        )
        
        try:
            await progress_message.edit_text(
                final_progress,
                parse_mode='Markdown'
            )
        except Exception:
            pass
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
    analysis_status = (
        f"üß† **AI-–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞**\n\n"
        f"{analysis_info['icon']} **{analysis_info['name']}**\n"
        f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** `{file_info['file_name']}`\n\n"
        
        "üîç **–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞:**\n"
        "‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GigaChat API...\n"
        "‚è∏Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n"
        "‚è∏Ô∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–∏—Å–∫–æ–≤\n"
        "‚è∏Ô∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
        
        "‚è≥ *–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 30-60 —Å–µ–∫—É–Ω–¥*\n"
        "ü§ñ *–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-—é—Ä–∏—Å—Ç*"
    )
    
    analysis_message = await update.callback_query.message.reply_text(
        analysis_status,
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    context.user_data['analysis_message'] = analysis_message
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_info = context.user_data['file_info']
        filename = file_info['file_name']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GigaChat
        analysis_result = await analyze_text_with_gigachat(analysis_type, extracted_text, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.user_data['analysis_result'] = analysis_result
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return await show_analysis_results(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞**\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            parse_mode='Markdown'
        )
        return AnalysisStates.RESULTS_REVIEW.value


async def show_analysis_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    analysis_result = context.user_data['analysis_result']
    file_info = context.user_data['file_info']
    analysis_type = context.user_data['analysis_type']
    analysis_info = ANALYSIS_TYPES[analysis_type]
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    progress_message = context.user_data.get('progress_message')
    analysis_message = context.user_data.get('analysis_message')
    
    if progress_message:
        completion_status = (
            f"‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            f"üìÑ **–§–∞–π–ª:** `{file_info['file_name']}`\n"
            f"üìè **–†–∞–∑–º–µ—Ä:** {file_info['file_size'] / 1024:.1f} –ö–ë\n"
            f"üìù **–¢–∏–ø:** {'–î–æ–∫—É–º–µ–Ω—Ç' if file_info['file_type'] == 'document' else '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫–∞–Ω)'}\n\n"
            
            "üîç **–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
            "‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
            "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n"
            "‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n\n"
            
            "üéâ *–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*"
        )
        
        try:
            await progress_message.edit_text(
                completion_status,
                parse_mode='Markdown'
            )
        except Exception:
            pass
    
    if analysis_message:
        try:
            await analysis_message.edit_text(
                f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
                f"{analysis_info['icon']} **{analysis_info['name']}**\n"
                f"üìÑ **–î–æ–∫—É–º–µ–Ω—Ç:** `{file_info['file_name']}`\n\n"
                "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è",
                parse_mode='Markdown'
            )
        except Exception:
            pass
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞", callback_data="change_analysis_type"),
            InlineKeyboardButton("üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="upload_new_document")
        ],
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_analysis")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π
    await send_long_message(
        update.callback_query.message.chat,
        analysis_result,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return AnalysisStates.RESULTS_REVIEW.value


async def handle_additional_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == "change_analysis_type":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        keyboard = []
        for analysis_type, info in ANALYSIS_TYPES.items():
            keyboard.append([InlineKeyboardButton(
                info['name'], 
                callback_data=f"analysis_type_{analysis_type}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return AnalysisStates.ANALYSIS_TYPE_SELECTION.value
        
    elif query.data == "upload_new_document":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return await analyze_command(update, context)
        
    elif query.data == "finish_analysis":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        context.user_data.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìä –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="start_analyze")],
            [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="menu_consult")],
            [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="menu_create")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI-—é—Ä–∏—Å—Ç–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    elif query.data == "main_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.clear()
        from bot.handlers import start_command
        return await start_command(update, context)
    
    return AnalysisStates.RESULTS_REVIEW.value


async def cancel_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        await update.callback_query.answer()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user = update.effective_user
        user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_message = (
            f"üèõÔ∏è **AI-–Æ—Ä–∏—Å—Ç** ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            
            "üéØ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å:**\n"
            "‚Ä¢ 6 –æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–∞–≤–∞\n"
            "‚Ä¢ 40+ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word\n"
            "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: 500+\n\n"
            
            "üíº **–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:**"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üí¨ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="menu_consult")],
            [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="menu_create")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="menu_analyze")],
            [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ùå –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π."
        )
    
    return ConversationHandler.END


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def extract_text_from_file(file_info: Dict[str, Any]) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    """
    file_extension = file_info['file_extension'].lower()
    file_type = file_info['file_type']
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_file_path = await download_telegram_file(file_info['file_id'], file_extension)
        
        extracted_text = ""
        
        if file_type == 'document':
            if file_extension in ['.doc', '.docx']:
                extracted_text = await extract_text_from_docx(temp_file_path)
            elif file_extension == '.pdf':
                extracted_text = await extract_text_from_pdf(temp_file_path)
        
        elif file_type == 'image':
            extracted_text = await extract_text_from_image(temp_file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
        cleaned_text = clean_extracted_text(extracted_text)
        
        return cleaned_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file_info['file_name']}: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}")


async def analyze_text_with_gigachat(analysis_type: str, text: str, filename: str = "–¥–æ–∫—É–º–µ–Ω—Ç") -> str:
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GigaChat API
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç GigaChat
        from ai_gigachat.client import gigachat_client
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GigaChat API
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename} —Ç–∏–ø–∞ {analysis_type}")
        
        analysis_result = await gigachat_client.analyze_document(
            document_text=text,
            analysis_type=analysis_type,
            filename=filename
        )
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return analysis_result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {filename}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        analysis_info = ANALYSIS_TYPES[analysis_type]
        
        return f"""‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**
{analysis_info['icon']} **{analysis_info['name']}**
üìÑ **–§–∞–π–ª:** {filename}

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-—Å–µ—Ä–≤–∏—Å–æ–º
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–π
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º

**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è

üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""


async def send_long_message(chat, text: str, **kwargs) -> None:
    """
    –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–º—ã—Å–ª—É
    """
    MAX_MESSAGE_LENGTH = 4096
    
    if len(text) <= MAX_MESSAGE_LENGTH:
        await chat.send_message(text, **kwargs)
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞—Å—Ç–∏
    parts = smart_split_message(text, MAX_MESSAGE_LENGTH)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, part in enumerate(parts):
        if i == len(parts) - 1:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await chat.send_message(part, **kwargs)
        else:
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ - –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            kwargs_copy = kwargs.copy()
            kwargs_copy.pop('reply_markup', None)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            continuation_indicator = f"\n\nüìÑ **–ß–∞—Å—Ç—å {i+1}/{len(parts)}** ‚Ä¢ *–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...*"
            await chat.send_message(part + continuation_indicator, **kwargs_copy)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            await asyncio.sleep(0.5)


def smart_split_message(text: str, max_length: int) -> List[str]:
    """
    –£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–º—ã—Å–ª—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_text = text
    
    while len(current_text) > max_length:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω–µ–µ)
        split_patterns = [
            '\n\n**',          # –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            '\n**',            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            '\n\n',            # –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            '\n‚Ä¢',             # –°–ø–∏—Å–æ–∫
            '\n-',             # –°–ø–∏—Å–æ–∫ —Å —Ç–∏—Ä–µ
            '\n',              # –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            '. ',              # –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            ', ',              # –ó–∞–ø—è—Ç–∞—è
            ' '                # –ü—Ä–æ–±–µ–ª
        ]
        
        split_index = -1
        
        # –ò—â–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
        for pattern in split_patterns:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            temp_index = current_text.rfind(pattern, 0, max_length - 100)  # –û—Å—Ç–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
            if temp_index > max_length // 2:  # –ù–µ —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
                split_index = temp_index + len(pattern)
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
        if split_index == -1:
            split_index = max_length
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å
        part = current_text[:split_index].strip()
        if part:
            parts.append(part)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è —Ç–µ–∫—Å—Ç—É
        current_text = current_text[split_index:].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if current_text:
        parts.append(current_text)
    
    return parts


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤

async def download_telegram_file(file_id: str, file_extension: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    """
    from telegram import Bot
    from config import TELEGRAM_TOKEN
    
    bot = Bot(token=TELEGRAM_TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file = await bot.get_file(file_id)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_dir = tempfile.gettempdir()
    temp_file_path = os.path.join(temp_dir, f"telegram_file_{file_id}{file_extension}")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await file.download_to_drive(temp_file_path)
    
    return temp_file_path


async def extract_text_from_docx(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–∞
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = DocxDocument(file_path)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        text_parts = []
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():
                text_parts.append(paragraph.text.strip())
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    if cell.text.strip():
                        text_parts.append(cell.text.strip())
        
        extracted_text = '\n'.join(text_parts)
        
        if not extracted_text.strip():
            raise Exception("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        return extracted_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å DOCX —Ñ–∞–π–ª: {str(e)}")


async def extract_text_from_pdf(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OCR –¥–ª—è —Å–∫–∞–Ω–æ–≤)
    """
    extracted_text = ""
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ PyMuPDF (–±—ã—Å—Ç—Ä–µ–µ)
        pdf_document = fitz.open(file_path)
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document.get_page(page_num)
            page_text = page.get_text()
            
            if page_text.strip():
                extracted_text += f"\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n{page_text}\n"
        
        pdf_document.close()
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(extracted_text.strip()) > 50:
            return extracted_text
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ, –ø—Ä–æ–±—É–µ–º OCR
        logger.info("–ú–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –≤ PDF, –ø—ã—Ç–∞–µ–º—Å—è OCR...")
        ocr_text = await extract_text_from_pdf_with_ocr(file_path)
        
        return ocr_text if ocr_text else extracted_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ PyPDF2
        try:
            return await extract_text_from_pdf_pypdf2(file_path)
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ PDF: {e2}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª: {str(e)}")


async def extract_text_from_pdf_pypdf2(file_path: str) -> str:
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —á–µ—Ä–µ–∑ PyPDF2
    """
    try:
        with open(file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            text_parts = []
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                page_text = page.extract_text()
                
                if page_text.strip():
                    text_parts.append(f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ---\n{page_text}")
            
            extracted_text = '\n'.join(text_parts)
            
            if not extracted_text.strip():
                raise Exception("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            return extracted_text
            
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ PyPDF2: {str(e)}")


async def extract_text_from_pdf_with_ocr(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é OCR (–¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract
        if not is_tesseract_available():
            raise Exception("OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract OCR")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from pdf2image import convert_from_path
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = convert_from_path(file_path, dpi=300, fmt='jpeg')
        
        text_parts = []
        for i, image in enumerate(images):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º OCR –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_text = pytesseract.image_to_string(image, lang='rus+eng')
            
            if page_text.strip():
                text_parts.append(f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} ---\n{page_text}")
        
        extracted_text = '\n'.join(text_parts)
        
        if not extracted_text.strip():
            raise Exception("OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ PDF")
        
        return extracted_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR –¥–ª—è PDF: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º PDF: {str(e)}")


async def extract_text_from_image(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OCR
    """
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Tesseract
        if not is_tesseract_available():
            logger.error("Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise Exception("OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tesseract OCR.\n"
                          "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tesseract OCR –≤ —Å–∏—Å—Ç–µ–º–µ.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            logger.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            raise Exception("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(file_path)} –±–∞–π—Ç")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(file_path)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: {image.size}, —Ä–µ–∂–∏–º: {image.mode}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ RGB")
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–æ–µ
        width, height = image.size
        if width < 1000 or height < 1000:
            scale_factor = max(1000 / width, 1000 / height)
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
            image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {new_width}x{new_height}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º OCR —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        logger.info("–ü—Ä–∏–º–µ–Ω—è–µ–º OCR...")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π OCR
        ocr_configs = [
            '--psm 3',  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            '--psm 6',  # –ï–¥–∏–Ω—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
            '--psm 4',  # –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        ]
        
        extracted_text = ""
        for config in ocr_configs:
            try:
                text = pytesseract.image_to_string(image, lang='rus+eng', config=config)
                if text and len(text.strip()) > len(extracted_text.strip()):
                    extracted_text = text
                    logger.info(f"OCR —É—Å–ø–µ—à–µ–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π {config}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text.strip())}")
            except Exception as e:
                logger.warning(f"OCR —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π {config} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                continue
        
        if not extracted_text or len(extracted_text.strip()) < 5:
            logger.warning(f"OCR –≤–µ—Ä–Ω—É–ª –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: '{extracted_text[:100]}...'")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
            try:
                text_eng = pytesseract.image_to_string(image, lang='eng')
                if len(text_eng.strip()) > len(extracted_text.strip()):
                    extracted_text = text_eng
                    logger.info(f"OCR —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º –¥–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(text_eng.strip())}")
            except Exception as e:
                logger.warning(f"OCR —Ç–æ–ª—å–∫–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            if len(extracted_text.strip()) < 5:
                return f"‚ö†Ô∏è OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –æ—á–µ–Ω—å –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π —Ç–µ–∫—Å—Ç\n‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç\n\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text.strip()}"
        
        logger.info(f"OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏–Ω–∞: {len(extracted_text.strip())}")
        return extracted_text
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file_path}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ OCR: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω"


def is_tesseract_available() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract OCR
    """
    try:
        import subprocess
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except (subprocess.TimeoutExpired, subprocess.CalledProcessError, FileNotFoundError):
        return False


def clean_extracted_text(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    if not text:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
    cleaned = re.sub(r'[ \t]+', ' ', text)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 2 –ø–æ–¥—Ä—è–¥)
    cleaned = re.sub(r'\n\s*\n\s*\n+', '\n\n', cleaned)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    lines = [line.strip() for line in cleaned.split('\n')]
    cleaned = '\n'.join(lines)
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    cleaned = cleaned.strip()
    
    # –î–ª—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π
    return cleaned

def create_analysis_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" –ø–µ—Ä–≤–æ–π
    keyboard.append([InlineKeyboardButton(
        ANALYSIS_TYPES['document_summary']['name'], 
        callback_data="analysis_type_document_summary"
    )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞
    for analysis_type, info in ANALYSIS_TYPES.items():
        if analysis_type != 'document_summary':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
            keyboard.append([InlineKeyboardButton(
                info['name'], 
                callback_data=f"analysis_type_{analysis_type}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(keyboard) 

def create_other_analysis_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è)"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–º–µ document_summary
    for analysis_type, info in ANALYSIS_TYPES.items():
        if analysis_type != 'document_summary':
            keyboard.append([InlineKeyboardButton(
                info['name'], 
                callback_data=f"analysis_type_{analysis_type}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(keyboard) 