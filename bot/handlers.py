#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""

import logging
from enum import Enum
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # type: ignore
from telegram.ext import ContextTypes, ConversationHandler  # type: ignore
from telegram.constants import ChatAction  # type: ignore
from ai_gigachat.client import gigachat_client

logger = logging.getLogger(__name__)


class ConsultationStates(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    CATEGORY_SELECTION = 0
    WAITING_QUESTION = 1
    PROCESSING = 2
    CONSULTATION_DIALOG = 3


async def consult_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /consult
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    user = update.effective_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üéì –Ø AI-—é—Ä–∏—Å—Ç –∏ –ø–æ–º–æ–≥—É –≤–∞–º —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é:\n\n"
        "üí° –Ø –º–æ–≥—É:\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        "‚Ä¢ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º\n"
        "‚Ä¢ –ü–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
    )
    
    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = [
        [
            InlineKeyboardButton("‚öñÔ∏è –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_civil"),
            InlineKeyboardButton("üîí –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_criminal")
        ],
        [
            InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_family"),
            InlineKeyboardButton("üíº –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_labor")
        ],
        [
            InlineKeyboardButton("üè† –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_housing"),
            InlineKeyboardButton("üöó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_admin")
        ],
        [
            InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="category_other")
        ],
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ –∏–∑ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ message
    if update.callback_query:
        # –í—ã–∑–≤–∞–Ω–æ –∏–∑ callback query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    else:
        # –í—ã–∑–≤–∞–Ω–æ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ /consult)
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    
    return ConsultationStates.CATEGORY_SELECTION.value


async def category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_map = {
        "category_civil": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ",
        "category_criminal": "–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", 
        "category_family": "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "category_labor": "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ",
        "category_housing": "–ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "category_admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ",
        "category_other": "–î—Ä—É–≥–æ–µ"
    }
    
    selected_category = category_map.get(query.data, "–î—Ä—É–≥–æ–µ")
    context.user_data['consultation_category'] = selected_category
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–ø—Ä–æ—Å–∞
    question_text = (
        f"üìù –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{selected_category}**\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
        "üìå –£–∫–∞–∂–∏—Ç–µ:\n"
        "‚Ä¢ –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å\n"
        "‚Ä¢ –ß—Ç–æ —É–∂–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–ª–∏\n"
        "‚Ä¢ –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        question_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConsultationStates.WAITING_QUESTION.value


async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_question = update.message.text
    category = context.user_data.get('consultation_category', '–û–±—â–µ–µ')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['user_question'] = user_question
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.message.chat.send_action(ChatAction.TYPING)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    status_message = await update.message.reply_text(
        "üì§ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n"
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...\n\n"
        "‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GigaChat API
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        answer = await gigachat_client.generate_consultation(
            user_question=user_question,
            category=category
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_message.delete()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        if 'consultation_history' not in context.user_data:
            context.user_data['consultation_history'] = []
        
        context.user_data['consultation_history'].extend([
            {
                'role': 'user',
                'content': user_question,
                'timestamp': update.message.date
            },
            {
                'role': 'assistant', 
                'content': answer,
                'timestamp': update.message.date
            }
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await send_consultation_answer(update, answer, category)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ë—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    
    return ConsultationStates.CONSULTATION_DIALOG.value


async def generate_consultation_answer(question: str, category: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GigaChat API
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        answer = await gigachat_client.generate_consultation(
            user_question=question,
            category=category
        )
        return answer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat: {e}")
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return (
            f"üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}**\n\n"
            f"‚ùì **–í–∞—à –≤–æ–ø—Ä–æ—Å:** {question[:100]}{'...' if len(question) > 100 else ''}\n\n"
            "‚ùå **–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
            "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"
            "üîÑ **–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /consult —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "üìû **–ü—Ä–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö** —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É.\n\n"
            "‚ùì –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /consult —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )


async def send_consultation_answer(update: Update, answer: str, category: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ—Å–µ–¥—ã
    """
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ—Å–µ–¥—ã
    keyboard = [
        [
            InlineKeyboardButton("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="continue_consultation"),
        ],
        [
            InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="new_consultation"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        answer,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return await consult_command_from_callback(query, context)


async def consult_command_from_callback(query, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑ callback
    """
    user = query.from_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üéì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:"
    )
    
    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = [
        [
            InlineKeyboardButton("‚öñÔ∏è –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_civil"),
            InlineKeyboardButton("üîí –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_criminal")
        ],
        [
            InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_family"),
            InlineKeyboardButton("üíº –¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_labor")
        ],
        [
            InlineKeyboardButton("üè† –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_housing"),
            InlineKeyboardButton("üöó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ", callback_data="category_admin")
        ],
        [
            InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="category_other")
        ],
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )
    
    return ConsultationStates.CATEGORY_SELECTION.value


async def cancel_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    await update.message.reply_text(
        "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–î–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /consult"
    )
    return ConversationHandler.END


async def continue_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    category = context.user_data.get('consultation_category', '–û–±—â–µ–µ')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'consultation_history' not in context.user_data:
        context.user_data['consultation_history'] = []
    
    continue_text = (
        f"üí¨ **–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n"
        "–Ø —É—á—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—à–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation"),
        ],
        [
            InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="new_consultation"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        continue_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConsultationStates.CONSULTATION_DIALOG.value


async def process_dialog_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    user_question = update.message.text
    category = context.user_data.get('consultation_category', '–û–±—â–µ–µ')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    consultation_history = context.user_data.get('consultation_history', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    consultation_history.append({
        'role': 'user',
        'content': user_question,
        'timestamp': update.message.date
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await update.message.chat.send_action(ChatAction.TYPING)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    status_message = await update.message.reply_text(
        "üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é...\n"
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã...\n\n"
        "‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GigaChat API —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        context_data = {
            'consultation_history': consultation_history,
            'is_continuation': True
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        answer = await gigachat_client.generate_consultation(
            user_question=user_question,
            category=category,
            user_context=context_data
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        consultation_history.append({
            'role': 'assistant',
            'content': answer,
            'timestamp': update.message.date
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['consultation_history'] = consultation_history
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        await send_dialog_answer(update, answer, category)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
        )
    
    return ConsultationStates.CONSULTATION_DIALOG.value


async def send_dialog_answer(update: Update, answer: str, category: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    keyboard = [
        [
            InlineKeyboardButton("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="continue_dialog"),
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation"),
        ],
        [
            InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="new_consultation"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        answer,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def continue_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    category = context.user_data.get('consultation_category', '–û–±—â–µ–µ')
    
    continue_text = (
        f"üí¨ **–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}**\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="end_consultation"),
        ],
        [
            InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="new_consultation"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        continue_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConsultationStates.CONSULTATION_DIALOG.value


async def end_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    context.user_data.pop('consultation_history', None)
    context.user_data.pop('consultation_category', None)
    context.user_data.pop('user_question', None)
    
    end_text = (
        "‚úÖ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI-—é—Ä–∏—Å—Ç—É!\n\n"
        "üí° **–ù–∞–ø–æ–º–∏–Ω–∞–µ–º:**\n"
        "‚Ä¢ –î–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
        "‚Ä¢ –ü—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã\n\n"
        "–î–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /consult"
    )
    
    await query.message.reply_text(
        end_text,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    """
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_message = (
        f"üèõÔ∏è **AI-–Æ—Ä–∏—Å—Ç** ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        
        "üéØ **–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å:**\n"
        "‚Ä¢ 6 –æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–∞–≤–∞\n"
        "‚Ä¢ 40+ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: 500+\n\n"
        
        "üíº **–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:**"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üí¨ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="menu_consult")],
        [InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="menu_create")],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="menu_analyze")],
        [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_help")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    user = update.effective_user
    user_name = user.first_name if user.first_name else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    help_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

ü§ñ **AI Lawyer Bot** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/consult - –ü–æ–ª—É—á–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
/create - –°–æ–∑–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç

üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**

üîπ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏** - –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –æ—Ç—Ä–∞—Å–ª—è–º –ø—Ä–∞–≤–∞
üîπ **–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –∏—Å–∫–æ–≤, –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∏ –¥—Ä—É–≥–∏—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üîπ **–≠–∫—Å–ø–æ—Ä—Ç –≤ Word** - –≥–æ—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_bot
"""
    
    await update.message.reply_text(help_text)